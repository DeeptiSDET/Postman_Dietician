{
	"info": {
		"_postman_id": "de03b5d4-eb00-460d-bc19-5f2542232be3",
		"name": "Team 01 Dietician API",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "31166238"
	},
	"item": [
		{
			"name": "Patient1",
			"item": [
				{
					"name": "UserLoginAdeline",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"AdelineToken\", response.token);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": ""
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"Clover21\",\r\n  \"userLoginEmail\": \"adelinegrace.a@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "dietician-dev-41d9a344a720.herokuapp.com/dietician/login"
					},
					"response": []
				},
				{
					"name": "UserLoginSwetha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": ""
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"Copper12\",\r\n  \"userLoginEmail\": \"swetha.gullapalli9@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "dietician-dev-41d9a344a720.herokuapp.com/dietician/login"
					},
					"response": []
				},
				{
					"name": "CreateNewPatient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const allergies = [\"Egg\", \"Milk\", \"Soy\", \"Almond\", \"Peanuts\", \"Walnut\", \"Pistachio\", \"Sesame\", \"Hazelnut\", \"Pistachio\", \"Pecan\", \"Cashew\"];\r",
									"\r",
									"const foodCategories = [\"Vegan\", \"Vegetarian\", \"Jain\", \"Eggetarian\", \"NonVeg\"];\r",
									"\r",
									"function getRandomItem(array) {\r",
									"    const randomIndex = Math.floor(Math.random() * array.length);\r",
									"    return array[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"Allergy\", getRandomItem(allergies));\r",
									"pm.variables.set(\"FoodCategory\", getRandomItem(foodCategories));\r",
									"\r",
									"const minBirthDate = new Date(\"1950-01-01\");\r",
									"const maxBirthDate = new Date(\"2005-01-01\");\r",
									"const randomBirthDate = new Date(minBirthDate.getTime() + Math.random() * (maxBirthDate.getTime() - minBirthDate.getTime()));\r",
									"const formattedBirthDate = randomBirthDate.toISOString().split(\"T\")[0];\r",
									"pm.variables.set(\"DateOfBirth\", formattedBirthDate); \r",
									"\r",
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"\r",
									"pm.environment.set(\"randomNumber\",randomNumber);\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"first_name\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"postman.setEnvironmentVariable(\"last_name\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"\r",
									"\r",
									"email_formatted = pm.environment.get(\"first_name\") + '_' + pm.environment.get(\"last_name\") + '@gmail.com';\r",
									"pm.environment.set(\"email\", email_formatted);\r",
									"console.log(\"Email: \" + pm.environment.get(\"email\"));\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"pm.globals.set(\"Patientid\",response.patientId );\r",
									"\r",
									"pm.globals.set(\"UserEmail\",response.Email);\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"First name is not empty\", function () {\r",
									"    pm.expect(pm.response.json().FirstName).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Last name is not empty\", function () {\r",
									"    pm.expect(pm.response.json().LastName).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Contact number is a string with 10 digits\", function () {\r",
									"    var contactNumber = pm.response.json().ContactNumber;\r",
									"    pm.expect(contactNumber).to.be.a('string');\r",
									"    pm.expect(contactNumber).to.match(/^\\d{10}$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is a valid email address\", function () {\r",
									"    pm.expect(pm.response.json().Email).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);\r",
									"});\r",
									"\r",
									"pm.test(\"Allergy is not empty\", function () {\r",
									"    pm.expect(pm.response.json().Allergy).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Food category is not empty\", function () {\r",
									"    pm.expect(pm.response.json().FoodCategory).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Date of birth is a valid date\", function () {\r",
									"    pm.expect(pm.response.json().DateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"patientId\": { \"type\": \"number\" },\r",
									"    \"FirstName\": { \"type\": \"string\" },\r",
									"    \"LastName\": { \"type\": \"string\" },\r",
									"    \"ContactNumber\": { \"type\": \"string\" },\r",
									"    \"Email\": { \"type\": \"string\" },\r",
									"    \"Allergy\": { \"type\": \"string\" },\r",
									"    \"FoodCategory\": { \"type\": \"string\" },\r",
									"    \"DateOfBirth\": { \"type\": \"string\" },\r",
									"    \"DieticianId\": { \"type\": \"number\" }\r",
									"  }\r",
									"};\r",
									"\r",
									"pm.test(\"Response body matches schema\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdelineToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo ",
									"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
									"contentType": "application/json",
									"type": "text"
								},
								{
									"key": "File",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "file",
									"type": "file",
									"src": "zIn_XN0h3/Hypo Thyroid-Report.pdf.pdf"
								},
								{
									"key": "File3",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "",
									"value": " ",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": "{{baseUrl}}/patient"
					},
					"response": [
						{
							"name": "CreateNewPatient",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo ",
											"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
											"contentType": "application/json",
											"type": "text"
										},
										{
											"key": "File",
											"type": "file",
											"src": [],
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "IHsnj-20e/HyperThyroid_Report_final.pdf"
										},
										{
											"key": "File3",
											"type": "file",
											"src": [],
											"disabled": true
										},
										{
											"key": "",
											"value": " ",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": "{{baseUrl}}/patient"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700164537&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=SfTiVwoPn97OssQOplpzJmd8A%2FMJc4uHHP5Np46HhXc%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700164537&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=SfTiVwoPn97OssQOplpzJmd8A%2FMJc4uHHP5Np46HhXc%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Nov 2023 19:55:37 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 566,\n    \"FirstName\": \"Tyreek\",\n    \"LastName\": \"Huel\",\n    \"ContactNumber\": \"6739030056\",\n    \"Email\": \"Tyreek_Huel@gmail.com\",\n    \"Allergy\": \"Hazelnut\",\n    \"FoodCategory\": \"Vegan\",\n    \"FileMorbidity\": {\n        \"655673b9d50d7811f3030cd8\": {\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\",\n            \"T3\": \"6.3 ng/mL\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"655673b9d50d7811f3030cd8\": \"Thyroid: Hyperthyroidism \\n\"\n    },\n    \"DateOfBirth\": \"2000-05-11T00:00:00.000+00:00\",\n    \"DieticianId\": 107\n}"
						}
					]
				},
				{
					"name": "CreateNewPatient Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const allergies = [\"Egg\", \"Milk\", \"Soy\", \"Almond\", \"Peanuts\", \"Walnut\", \"Pistachio\", \"Sesame\", \"Hazelnut\", \"Pistachio\", \"Pecan\", \"Cashew\"];\r",
									"\r",
									"const foodCategories = [\"Vegan\", \"Vegetarian\", \"Jain\", \"Eggetarian\", \"NonVeg\"];\r",
									"\r",
									"function getRandomItem(array) {\r",
									"    const randomIndex = Math.floor(Math.random() * array.length);\r",
									"    return array[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"Allergy\", getRandomItem(allergies));\r",
									"pm.variables.set(\"FoodCategory\", getRandomItem(foodCategories));\r",
									"\r",
									"const minBirthDate = new Date(\"1950-01-01\");\r",
									"const maxBirthDate = new Date(\"2005-01-01\");\r",
									"const randomBirthDate = new Date(minBirthDate.getTime() + Math.random() * (maxBirthDate.getTime() - minBirthDate.getTime()));\r",
									"const formattedBirthDate = randomBirthDate.toISOString().split(\"T\")[0];\r",
									"pm.variables.set(\"DateOfBirth\", formattedBirthDate); \r",
									"\r",
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"\r",
									"pm.environment.set(\"randomNumber\",randomNumber);\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"first_name\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"postman.setEnvironmentVariable(\"last_name\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"\r",
									"\r",
									"email_formatted = pm.environment.get(\"first_name\") + '_' + pm.environment.get(\"last_name\") + '@gmail.com';\r",
									"pm.environment.set(\"email\", email_formatted);\r",
									"console.log(\"Email: \" + pm.environment.get(\"email\"));\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"pm.globals.set(\"Patientid\",response.patientId );\r",
									"\r",
									"pm.globals.set(\"UserEmail\",response.Email);\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"First name is not empty\", function () {\r",
									"    pm.expect(pm.response.json().FirstName).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Last name is not empty\", function () {\r",
									"    pm.expect(pm.response.json().LastName).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Contact number is a string with 10 digits\", function () {\r",
									"    var contactNumber = pm.response.json().ContactNumber;\r",
									"    pm.expect(contactNumber).to.be.a('string');\r",
									"    pm.expect(contactNumber).to.match(/^\\d{10}$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is a valid email address\", function () {\r",
									"    pm.expect(pm.response.json().Email).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);\r",
									"});\r",
									"\r",
									"pm.test(\"Allergy is not empty\", function () {\r",
									"    pm.expect(pm.response.json().Allergy).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Food category is not empty\", function () {\r",
									"    pm.expect(pm.response.json().FoodCategory).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Date of birth is a valid date\", function () {\r",
									"    pm.expect(pm.response.json().DateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"patientId\": { \"type\": \"number\" },\r",
									"    \"FirstName\": { \"type\": \"string\" },\r",
									"    \"LastName\": { \"type\": \"string\" },\r",
									"    \"ContactNumber\": { \"type\": \"string\" },\r",
									"    \"Email\": { \"type\": \"string\" },\r",
									"    \"Allergy\": { \"type\": \"string\" },\r",
									"    \"FoodCategory\": { \"type\": \"string\" },\r",
									"    \"DateOfBirth\": { \"type\": \"string\" },\r",
									"    \"DieticianId\": { \"type\": \"number\" }\r",
									"  }\r",
									"};\r",
									"\r",
									"pm.test(\"Response body matches schema\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdelineToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo ",
									"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
									"contentType": "application/json",
									"type": "text"
								},
								{
									"key": "File",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "file",
									"type": "file",
									"src": "zIn_XN0h3/Hypo Thyroid-Report.pdf.pdf"
								},
								{
									"key": "File3",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "",
									"value": " ",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": "{{baseUrl}}/patient"
					},
					"response": [
						{
							"name": "CreateNewPatient",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo ",
											"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
											"contentType": "application/json",
											"type": "text"
										},
										{
											"key": "File",
											"type": "file",
											"src": [],
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "IHsnj-20e/HyperThyroid_Report_final.pdf"
										},
										{
											"key": "File3",
											"type": "file",
											"src": [],
											"disabled": true
										},
										{
											"key": "",
											"value": " ",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": "{{baseUrl}}/patient"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700164537&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=SfTiVwoPn97OssQOplpzJmd8A%2FMJc4uHHP5Np46HhXc%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700164537&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=SfTiVwoPn97OssQOplpzJmd8A%2FMJc4uHHP5Np46HhXc%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Nov 2023 19:55:37 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 566,\n    \"FirstName\": \"Tyreek\",\n    \"LastName\": \"Huel\",\n    \"ContactNumber\": \"6739030056\",\n    \"Email\": \"Tyreek_Huel@gmail.com\",\n    \"Allergy\": \"Hazelnut\",\n    \"FoodCategory\": \"Vegan\",\n    \"FileMorbidity\": {\n        \"655673b9d50d7811f3030cd8\": {\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\",\n            \"T3\": \"6.3 ng/mL\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"655673b9d50d7811f3030cd8\": \"Thyroid: Hyperthyroidism \\n\"\n    },\n    \"DateOfBirth\": \"2000-05-11T00:00:00.000+00:00\",\n    \"DieticianId\": 107\n}"
						}
					]
				},
				{
					"name": "CreateNewPatientwithoutFile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const allergies = [\"Egg\", \"Milk\", \"Soy\", \"Almond\", \"Peanuts\", \"Walnut\", \"Pistachio\", \"Sesame\", \"Hazelnut\", \"Pistachio\", \"Pecan\", \"Cashew\"];\r",
									"\r",
									"const foodCategories = [\"Vegan\", \"Vegetarian\", \"Jain\", \"Eggetarian\", \"NonVeg\"];\r",
									"\r",
									"function getRandomItem(array) {\r",
									"    const randomIndex = Math.floor(Math.random() * array.length);\r",
									"    return array[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"Allergy\", getRandomItem(allergies));\r",
									"pm.variables.set(\"FoodCategory\", getRandomItem(foodCategories));\r",
									"\r",
									"const minBirthDate = new Date(\"1950-01-01\");\r",
									"const maxBirthDate = new Date(\"2005-01-01\");\r",
									"const randomBirthDate = new Date(minBirthDate.getTime() + Math.random() * (maxBirthDate.getTime() - minBirthDate.getTime()));\r",
									"const formattedBirthDate = randomBirthDate.toISOString().split(\"T\")[0];\r",
									"pm.variables.set(\"DateOfBirth\", formattedBirthDate); \r",
									"\r",
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"\r",
									"pm.environment.set(\"randomNumber\",randomNumber);\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"first_name\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"postman.setEnvironmentVariable(\"last_name\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"\r",
									"\r",
									"email_formatted = pm.environment.get(\"first_name\") + '_' + pm.environment.get(\"last_name\") + '@gmail.com';\r",
									"pm.environment.set(\"email\", email_formatted);\r",
									"console.log(\"Email: \" + pm.environment.get(\"email\"));\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"pm.globals.set(\"ExistingContactNumber\", response.ContactNumber);\r",
									"pm.globals.set(\"ExistingDateOfBirth\", response.DateOfBirth);\r",
									"\r",
									"pm.globals.set(\"Patientidwithoutfile\",response.patientId );\r",
									"\r",
									"pm.globals.set(\"UserEmailwithoutfile\",response.Email);\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"First name is not empty\", function () {\r",
									"    pm.expect(pm.response.json().FirstName).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Last name is not empty\", function () {\r",
									"    pm.expect(pm.response.json().LastName).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Contact number is a string with 10 digits\", function () {\r",
									"    var contactNumber = pm.response.json().ContactNumber;\r",
									"    pm.expect(contactNumber).to.be.a('string');\r",
									"    pm.expect(contactNumber).to.match(/^\\d{10}$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is a valid email address\", function () {\r",
									"    pm.expect(pm.response.json().Email).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);\r",
									"});\r",
									"\r",
									"pm.test(\"Allergy is not empty\", function () {\r",
									"    pm.expect(pm.response.json().Allergy).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Food category is not empty\", function () {\r",
									"    pm.expect(pm.response.json().FoodCategory).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Date of birth is a valid date\", function () {\r",
									"    pm.expect(pm.response.json().DateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"patientId\": { \"type\": \"number\" },\r",
									"    \"FirstName\": { \"type\": \"string\" },\r",
									"    \"LastName\": { \"type\": \"string\" },\r",
									"    \"ContactNumber\": { \"type\": \"string\" },\r",
									"    \"Email\": { \"type\": \"string\" },\r",
									"    \"Allergy\": { \"type\": \"string\" },\r",
									"    \"FoodCategory\": { \"type\": \"string\" },\r",
									"    \"DateOfBirth\": { \"type\": \"string\" },\r",
									"    \"DieticianId\": { \"type\": \"number\" }\r",
									"  }\r",
									"};\r",
									"\r",
									"pm.test(\"Response body matches schema\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdelineToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo ",
									"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
									"contentType": "application/json",
									"type": "text"
								},
								{
									"key": "File",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "file",
									"type": "file",
									"src": "IHsnj-20e/HyperThyroid_Report_final.pdf",
									"disabled": true
								},
								{
									"key": "File3",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "",
									"value": " ",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": "{{baseUrl}}/patient"
					},
					"response": [
						{
							"name": "CreateNewPatient",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo ",
											"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
											"contentType": "application/json",
											"type": "text"
										},
										{
											"key": "File",
											"type": "file",
											"src": [],
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "IHsnj-20e/HyperThyroid_Report_final.pdf"
										},
										{
											"key": "File3",
											"type": "file",
											"src": [],
											"disabled": true
										},
										{
											"key": "",
											"value": " ",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": "{{baseUrl}}/patient"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700164537&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=SfTiVwoPn97OssQOplpzJmd8A%2FMJc4uHHP5Np46HhXc%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700164537&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=SfTiVwoPn97OssQOplpzJmd8A%2FMJc4uHHP5Np46HhXc%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Nov 2023 19:55:37 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 566,\n    \"FirstName\": \"Tyreek\",\n    \"LastName\": \"Huel\",\n    \"ContactNumber\": \"6739030056\",\n    \"Email\": \"Tyreek_Huel@gmail.com\",\n    \"Allergy\": \"Hazelnut\",\n    \"FoodCategory\": \"Vegan\",\n    \"FileMorbidity\": {\n        \"655673b9d50d7811f3030cd8\": {\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\",\n            \"T3\": \"6.3 ng/mL\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"655673b9d50d7811f3030cd8\": \"Thyroid: Hyperthyroidism \\n\"\n    },\n    \"DateOfBirth\": \"2000-05-11T00:00:00.000+00:00\",\n    \"DieticianId\": 107\n}"
						}
					]
				},
				{
					"name": "NegativeInvalidIdUpdate Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"errorCode\", \"NOT_FOUND\");\r",
									"    pm.expect(jsonData).to.have.property(\"errorMessage\", \"Patient not found with patientId : 0\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const allergies = [\"Egg\", \"Milk\", \"Soy\", \"Almond\", \"Peanuts\", \"Walnut\", \"Pistachio\", \"Sesame\", \"Hazelnut\", \"Pistachio\", \"Pecan\", \"Cashew\"];\r",
									"\r",
									"const foodCategories = [\"Vegan\", \"Vegetarian\", \"Jain\", \"Eggetarian\", \"NonVeg\"];\r",
									"\r",
									"function getRandomItem(array) {\r",
									"    const randomIndex = Math.floor(Math.random() * array.length);\r",
									"    return array[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"Allergy\", getRandomItem(allergies));\r",
									"pm.variables.set(\"FoodCategory\", getRandomItem(foodCategories));\r",
									"\r",
									"const minBirthDate = new Date(\"1950-01-01\");\r",
									"const maxBirthDate = new Date(\"2005-01-01\");\r",
									"const randomBirthDate = new Date(minBirthDate.getTime() + Math.random() * (maxBirthDate.getTime() - minBirthDate.getTime()));\r",
									"const formattedBirthDate = randomBirthDate.toISOString().split(\"T\")[0];\r",
									"pm.variables.set(\"DateOfBirth\", formattedBirthDate); \r",
									"\r",
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"\r",
									"pm.environment.set(\"randomNumber\",randomNumber);\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"first_name\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"postman.setEnvironmentVariable(\"last_name\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"\r",
									"\r",
									"email_formatted = pm.environment.get(\"first_name\") + '_' + pm.environment.get(\"last_name\") + '@gmail.com';\r",
									"pm.environment.set(\"email\", email_formatted);\r",
									"console.log(\"Email: \" + pm.environment.get(\"email\"));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdelineToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo ",
									"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
									"contentType": "application/json",
									"type": "text"
								},
								{
									"key": "FileMorbidity",
									"type": "file",
									"src": "YsOpMsjjc/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
								},
								{
									"key": "FileMorbidityCondition",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "File3",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "",
									"value": " ",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/patient/:patientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patient",
								":patientId"
							],
							"variable": [
								{
									"key": "patientId",
									"value": "000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CSVUpdateDateofBirthPatientId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"First name is not empty\", function () {\r",
									"    pm.expect(pm.response.json().FirstName).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Last name is not empty\", function () {\r",
									"    pm.expect(pm.response.json().LastName).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Contact number is a string with 10 digits\", function () {\r",
									"    var contactNumber = pm.response.json().ContactNumber;\r",
									"    pm.expect(contactNumber).to.be.a('string');\r",
									"    pm.expect(contactNumber).to.match(/^\\d{10}$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is a valid email address\", function () {\r",
									"    pm.expect(pm.response.json().Email).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);\r",
									"});\r",
									"\r",
									"pm.test(\"Allergy is not empty\", function () {\r",
									"    pm.expect(pm.response.json().Allergy).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Food category is not empty\", function () {\r",
									"    pm.expect(pm.response.json().FoodCategory).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Date of birth is a valid date\", function () {\r",
									"    pm.expect(pm.response.json().DateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"patientId\": { \"type\": \"number\" },\r",
									"    \"FirstName\": { \"type\": \"string\" },\r",
									"    \"LastName\": { \"type\": \"string\" },\r",
									"    \"ContactNumber\": { \"type\": \"string\" },\r",
									"    \"Email\": { \"type\": \"string\" },\r",
									"    \"Allergy\": { \"type\": \"string\" },\r",
									"    \"FoodCategory\": { \"type\": \"string\" },\r",
									"    \"DateOfBirth\": { \"type\": \"string\" },\r",
									"    \"DieticianId\": { \"type\": \"number\" }\r",
									"  }\r",
									"};\r",
									"\r",
									"pm.test(\"Response body matches schema\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const allergies = [\"Egg\", \"Milk\", \"Soy\", \"Almond\", \"Peanuts\", \"Walnut\", \"Pistachio\", \"Sesame\", \"Hazelnut\", \"Pistachio\", \"Pecan\", \"Cashew\"];\r",
									"\r",
									"const foodCategories = [\"Vegan\", \"Vegetarian\", \"Jain\", \"Eggetarian\", \"NonVeg\"];\r",
									"\r",
									"function getRandomItem(array) {\r",
									"    const randomIndex = Math.floor(Math.random() * array.length);\r",
									"    return array[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"Allergy\", getRandomItem(allergies));\r",
									"pm.variables.set(\"FoodCategory\", getRandomItem(foodCategories));\r",
									"\r",
									"const minBirthDate = new Date(\"1950-01-01\");\r",
									"const maxBirthDate = new Date(\"2005-01-01\");\r",
									"const randomBirthDate = new Date(minBirthDate.getTime() + Math.random() * (maxBirthDate.getTime() - minBirthDate.getTime()));\r",
									"const formattedBirthDate = randomBirthDate.toISOString().split(\"T\")[0];\r",
									"pm.variables.set(\"DateOfBirth\", formattedBirthDate); \r",
									"\r",
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"\r",
									"pm.environment.set(\"randomNumber\",randomNumber);\r",
									"\r",
									"console.log(pm.variables);\r",
									"console.log('{{$randomFirstName}}');\r",
									"postman.setEnvironmentVariable(\"first_name\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"postman.setEnvironmentVariable(\"last_name\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"\r",
									"\r",
									"email_formatted = pm.environment.get(\"first_name\") + '_' + pm.environment.get(\"last_name\") + '@gmail.com';\r",
									"pm.environment.set(\"email\", email_formatted);\r",
									"console.log(\"Email: \" + pm.environment.get(\"email\"));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdelineToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo ",
									"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{BirthDate}}\"\n}",
									"contentType": "application/json",
									"type": "text"
								},
								{
									"key": "FileMorbidity",
									"type": "file",
									"src": "YsOpMsjjc/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
								},
								{
									"key": "FileMorbidityCondition",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "File3",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "",
									"value": " ",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/patient/:patientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patient",
								":patientId"
							],
							"variable": [
								{
									"key": "patientId",
									"value": "{{Patientid}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "CreateNewPatient",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo ",
											"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
											"contentType": "application/json",
											"type": "text"
										},
										{
											"key": "FileMorbidity",
											"type": "file",
											"src": "ipqKE6mho/Diabetic Thyroid tests.pdf.pdf"
										},
										{
											"key": "FileMorbidityCondition",
											"type": "file",
											"src": "CPa3ZmO5U/HyperThyroid_Report_final.pdf"
										},
										{
											"key": "File3",
											"type": "file",
											"src": "u-PIIfT61/Hypo Thyroid-Report.pdf.pdf"
										},
										{
											"key": "",
											"value": " ",
											"type": "text",
											"disabled": true
										}
									],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/patient"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700088587&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=u3B0GpVAgPqAR2rjh5ot5TAaaR4tDvTTQvfi%2BJkYv2w%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700088587&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=u3B0GpVAgPqAR2rjh5ot5TAaaR4tDvTTQvfi%2BJkYv2w%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 15 Nov 2023 22:49:48 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 175,\n    \"FirstName\": \"Marjolaine\",\n    \"LastName\": \"McCullough\",\n    \"ContactNumber\": \"6660890974\",\n    \"Email\": \"Marjolaine_McCullough@gmail.com\",\n    \"Allergy\": \"Almond\",\n    \"FoodCategory\": \"Vegan\",\n    \"DateOfBirth\": \"1979-11-04T00:00:00.000+00:00\",\n    \"DieticianId\": 107\n}"
						}
					]
				},
				{
					"name": "CSVNegativeUpdateDateofBirthPatientId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"errorCode\", \"INVALID_REQ_DATA\");\r",
									"    pm.expect(jsonData).to.have.property(\"errorMessage\", \"Date of Birth is Mandatory!\\n \");\r",
									"});\r",
									"\r",
									"    "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const allergies = [\"Egg\", \"Milk\", \"Soy\", \"Almond\", \"Peanuts\", \"Walnut\", \"Pistachio\", \"Sesame\", \"Hazelnut\", \"Pistachio\", \"Pecan\", \"Cashew\"];\r",
									"\r",
									"const foodCategories = [\"Vegan\", \"Vegetarian\", \"Jain\", \"Eggetarian\", \"NonVeg\"];\r",
									"\r",
									"function getRandomItem(array) {\r",
									"    const randomIndex = Math.floor(Math.random() * array.length);\r",
									"    return array[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"Allergy\", getRandomItem(allergies));\r",
									"pm.variables.set(\"FoodCategory\", getRandomItem(foodCategories));\r",
									"\r",
									"\r",
									"\r",
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"\r",
									"pm.environment.set(\"randomNumber\",randomNumber);\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"first_name\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"postman.setEnvironmentVariable(\"last_name\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"\r",
									"\r",
									"email_formatted = pm.environment.get(\"first_name\") + '_' + pm.environment.get(\"last_name\") + '@gmail.com';\r",
									"pm.environment.set(\"email\", email_formatted);\r",
									"console.log(\"Email: \" + pm.environment.get(\"email\"));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdelineToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo ",
									"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"\"\n}",
									"contentType": "application/json",
									"type": "text"
								},
								{
									"key": "FileMorbidity",
									"type": "file",
									"src": "YsOpMsjjc/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
								},
								{
									"key": "FileMorbidityCondition",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "File3",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "",
									"value": " ",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/patient/:patientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patient",
								":patientId"
							],
							"variable": [
								{
									"key": "patientId",
									"value": "{{Patientid}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "CreateNewPatient",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo ",
											"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
											"contentType": "application/json",
											"type": "text"
										},
										{
											"key": "FileMorbidity",
											"type": "file",
											"src": "ipqKE6mho/Diabetic Thyroid tests.pdf.pdf"
										},
										{
											"key": "FileMorbidityCondition",
											"type": "file",
											"src": "CPa3ZmO5U/HyperThyroid_Report_final.pdf"
										},
										{
											"key": "File3",
											"type": "file",
											"src": "u-PIIfT61/Hypo Thyroid-Report.pdf.pdf"
										},
										{
											"key": "",
											"value": " ",
											"type": "text",
											"disabled": true
										}
									],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/patient"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700088587&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=u3B0GpVAgPqAR2rjh5ot5TAaaR4tDvTTQvfi%2BJkYv2w%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700088587&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=u3B0GpVAgPqAR2rjh5ot5TAaaR4tDvTTQvfi%2BJkYv2w%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 15 Nov 2023 22:49:48 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 175,\n    \"FirstName\": \"Marjolaine\",\n    \"LastName\": \"McCullough\",\n    \"ContactNumber\": \"6660890974\",\n    \"Email\": \"Marjolaine_McCullough@gmail.com\",\n    \"Allergy\": \"Almond\",\n    \"FoodCategory\": \"Vegan\",\n    \"DateOfBirth\": \"1979-11-04T00:00:00.000+00:00\",\n    \"DieticianId\": 107\n}"
						}
					]
				},
				{
					"name": "CSVUpdateContactNumberPatientId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"First name is not empty\", function () {\r",
									"    pm.expect(pm.response.json().FirstName).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Last name is not empty\", function () {\r",
									"    pm.expect(pm.response.json().LastName).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Contact number is a string with 10 digits\", function () {\r",
									"    var contactNumber = pm.response.json().ContactNumber;\r",
									"    pm.expect(contactNumber).to.be.a('string');\r",
									"    pm.expect(contactNumber).to.match(/^\\d{10}$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is a valid email address\", function () {\r",
									"    pm.expect(pm.response.json().Email).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);\r",
									"});\r",
									"\r",
									"pm.test(\"Allergy is not empty\", function () {\r",
									"    pm.expect(pm.response.json().Allergy).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Food category is not empty\", function () {\r",
									"    pm.expect(pm.response.json().FoodCategory).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Date of birth is a valid date\", function () {\r",
									"    pm.expect(pm.response.json().DateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"patientId\": { \"type\": \"number\" },\r",
									"    \"FirstName\": { \"type\": \"string\" },\r",
									"    \"LastName\": { \"type\": \"string\" },\r",
									"    \"ContactNumber\": { \"type\": \"string\" },\r",
									"    \"Email\": { \"type\": \"string\" },\r",
									"    \"Allergy\": { \"type\": \"string\" },\r",
									"    \"FoodCategory\": { \"type\": \"string\" },\r",
									"    \"DateOfBirth\": { \"type\": \"string\" },\r",
									"    \"DieticianId\": { \"type\": \"number\" }\r",
									"  }\r",
									"};\r",
									"\r",
									"pm.test(\"Response body matches schema\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const allergies = [\"Egg\", \"Milk\", \"Soy\", \"Almond\", \"Peanuts\", \"Walnut\", \"Pistachio\", \"Sesame\", \"Hazelnut\", \"Pistachio\", \"Pecan\", \"Cashew\"];\r",
									"\r",
									"const foodCategories = [\"Vegan\", \"Vegetarian\", \"Jain\", \"Eggetarian\", \"NonVeg\"];\r",
									"\r",
									"function getRandomItem(array) {\r",
									"    const randomIndex = Math.floor(Math.random() * array.length);\r",
									"    return array[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"Allergy\", getRandomItem(allergies));\r",
									"pm.variables.set(\"FoodCategory\", getRandomItem(foodCategories));\r",
									"\r",
									"const minBirthDate = new Date(\"1950-01-01\");\r",
									"const maxBirthDate = new Date(\"2005-01-01\");\r",
									"const randomBirthDate = new Date(minBirthDate.getTime() + Math.random() * (maxBirthDate.getTime() - minBirthDate.getTime()));\r",
									"const formattedBirthDate = randomBirthDate.toISOString().split(\"T\")[0];\r",
									"pm.variables.set(\"DateOfBirth\", formattedBirthDate); \r",
									"\r",
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"\r",
									"pm.environment.set(\"randomNumber\",randomNumber);\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"first_name\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"postman.setEnvironmentVariable(\"last_name\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"\r",
									"\r",
									"email_formatted = pm.environment.get(\"first_name\") + '_' + pm.environment.get(\"last_name\") + '@gmail.com';\r",
									"pm.environment.set(\"email\", email_formatted);\r",
									"console.log(\"Email: \" + pm.environment.get(\"email\"));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdelineToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo ",
									"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{ContactNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
									"contentType": "application/json",
									"type": "text"
								},
								{
									"key": "FileMorbidity",
									"type": "file",
									"src": "YsOpMsjjc/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
								},
								{
									"key": "FileMorbidityCondition",
									"type": "file",
									"src": "DQUEUCEec/HyperThyroid_Report_final.pdf"
								},
								{
									"key": "File3",
									"type": "file",
									"src": "iLQFGkdin/Hypo Thyroid-Report.pdf.pdf"
								},
								{
									"key": "",
									"value": " ",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/patient/:patientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patient",
								":patientId"
							],
							"variable": [
								{
									"key": "patientId",
									"value": "{{Patientid}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "CreateNewPatient",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo ",
											"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
											"contentType": "application/json",
											"type": "text"
										},
										{
											"key": "FileMorbidity",
											"type": "file",
											"src": "ipqKE6mho/Diabetic Thyroid tests.pdf.pdf"
										},
										{
											"key": "FileMorbidityCondition",
											"type": "file",
											"src": "CPa3ZmO5U/HyperThyroid_Report_final.pdf"
										},
										{
											"key": "File3",
											"type": "file",
											"src": "u-PIIfT61/Hypo Thyroid-Report.pdf.pdf"
										},
										{
											"key": "",
											"value": " ",
											"type": "text",
											"disabled": true
										}
									],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/patient"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700088587&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=u3B0GpVAgPqAR2rjh5ot5TAaaR4tDvTTQvfi%2BJkYv2w%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700088587&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=u3B0GpVAgPqAR2rjh5ot5TAaaR4tDvTTQvfi%2BJkYv2w%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 15 Nov 2023 22:49:48 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 175,\n    \"FirstName\": \"Marjolaine\",\n    \"LastName\": \"McCullough\",\n    \"ContactNumber\": \"6660890974\",\n    \"Email\": \"Marjolaine_McCullough@gmail.com\",\n    \"Allergy\": \"Almond\",\n    \"FoodCategory\": \"Vegan\",\n    \"DateOfBirth\": \"1979-11-04T00:00:00.000+00:00\",\n    \"DieticianId\": 107\n}"
						}
					]
				},
				{
					"name": "CSVNegativeUpdateContactNumberPatientId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"errorCode\", \"INVALID_REQ_DATA\");\r",
									"    pm.expect(jsonData).to.have.property(\"errorMessage\", \"Contact number should contain 10 digits\\n \");\r",
									"});\r",
									"\r",
									"    "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const allergies = [\"Egg\", \"Milk\", \"Soy\", \"Almond\", \"Peanuts\", \"Walnut\", \"Pistachio\", \"Sesame\", \"Hazelnut\", \"Pistachio\", \"Pecan\", \"Cashew\"];\r",
									"\r",
									"const foodCategories = [\"Vegan\", \"Vegetarian\", \"Jain\", \"Eggetarian\", \"NonVeg\"];\r",
									"\r",
									"function getRandomItem(array) {\r",
									"    const randomIndex = Math.floor(Math.random() * array.length);\r",
									"    return array[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"Allergy\", getRandomItem(allergies));\r",
									"pm.variables.set(\"FoodCategory\", getRandomItem(foodCategories));\r",
									"\r",
									"const minBirthDate = new Date(\"1950-01-01\");\r",
									"const maxBirthDate = new Date(\"2005-01-01\");\r",
									"const randomBirthDate = new Date(minBirthDate.getTime() + Math.random() * (maxBirthDate.getTime() - minBirthDate.getTime()));\r",
									"const formattedBirthDate = randomBirthDate.toISOString().split(\"T\")[0];\r",
									"pm.variables.set(\"DateOfBirth\", formattedBirthDate); \r",
									"\r",
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"\r",
									"pm.environment.set(\"randomNumber\",randomNumber);\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"first_name\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"postman.setEnvironmentVariable(\"last_name\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"\r",
									"\r",
									"email_formatted = pm.environment.get(\"first_name\") + '_' + pm.environment.get(\"last_name\") + '@gmail.com';\r",
									"pm.environment.set(\"email\", email_formatted);\r",
									"console.log(\"Email: \" + pm.environment.get(\"email\"));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdelineToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo ",
									"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{InvalidContactNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
									"contentType": "application/json",
									"type": "text"
								},
								{
									"key": "FileMorbidity",
									"type": "file",
									"src": "YsOpMsjjc/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
								},
								{
									"key": "FileMorbidityCondition",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "File3",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "",
									"value": " ",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/patient/:patientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patient",
								":patientId"
							],
							"variable": [
								{
									"key": "patientId",
									"value": "{{Patientid}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "CreateNewPatient",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo ",
											"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
											"contentType": "application/json",
											"type": "text"
										},
										{
											"key": "FileMorbidity",
											"type": "file",
											"src": "ipqKE6mho/Diabetic Thyroid tests.pdf.pdf"
										},
										{
											"key": "FileMorbidityCondition",
											"type": "file",
											"src": "CPa3ZmO5U/HyperThyroid_Report_final.pdf"
										},
										{
											"key": "File3",
											"type": "file",
											"src": "u-PIIfT61/Hypo Thyroid-Report.pdf.pdf"
										},
										{
											"key": "",
											"value": " ",
											"type": "text",
											"disabled": true
										}
									],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/patient"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700088587&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=u3B0GpVAgPqAR2rjh5ot5TAaaR4tDvTTQvfi%2BJkYv2w%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700088587&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=u3B0GpVAgPqAR2rjh5ot5TAaaR4tDvTTQvfi%2BJkYv2w%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 15 Nov 2023 22:49:48 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 175,\n    \"FirstName\": \"Marjolaine\",\n    \"LastName\": \"McCullough\",\n    \"ContactNumber\": \"6660890974\",\n    \"Email\": \"Marjolaine_McCullough@gmail.com\",\n    \"Allergy\": \"Almond\",\n    \"FoodCategory\": \"Vegan\",\n    \"DateOfBirth\": \"1979-11-04T00:00:00.000+00:00\",\n    \"DieticianId\": 107\n}"
						}
					]
				},
				{
					"name": "CSVNegativeUpdateEmailPatientId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"errorCode\", \"INVALID_REQ_DATA\");\r",
									"    pm.expect(jsonData).to.have.property(\"errorMessage\", \"Invalid Email Id!\\n \");\r",
									"});\r",
									"\r",
									"    "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const allergies = [\"Egg\", \"Milk\", \"Soy\", \"Almond\", \"Peanuts\", \"Walnut\", \"Pistachio\", \"Sesame\", \"Hazelnut\", \"Pistachio\", \"Pecan\", \"Cashew\"];\r",
									"\r",
									"const foodCategories = [\"Vegan\", \"Vegetarian\", \"Jain\", \"Eggetarian\", \"NonVeg\"];\r",
									"\r",
									"function getRandomItem(array) {\r",
									"    const randomIndex = Math.floor(Math.random() * array.length);\r",
									"    return array[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"Allergy\", getRandomItem(allergies));\r",
									"pm.variables.set(\"FoodCategory\", getRandomItem(foodCategories));\r",
									"\r",
									"const minBirthDate = new Date(\"1950-01-01\");\r",
									"const maxBirthDate = new Date(\"2005-01-01\");\r",
									"const randomBirthDate = new Date(minBirthDate.getTime() + Math.random() * (maxBirthDate.getTime() - minBirthDate.getTime()));\r",
									"const formattedBirthDate = randomBirthDate.toISOString().split(\"T\")[0];\r",
									"pm.variables.set(\"DateOfBirth\", formattedBirthDate); \r",
									"\r",
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"\r",
									"pm.environment.set(\"randomNumber\",randomNumber);\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"first_name\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"postman.setEnvironmentVariable(\"last_name\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"\r",
									"\r",
									"email_formatted = pm.environment.get(\"first_name\") + '_' + pm.environment.get(\"last_name\") + '@gmail.com';\r",
									"pm.environment.set(\"email\", email_formatted);\r",
									"console.log(\"Email: \" + pm.environment.get(\"email\"));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdelineToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo ",
									"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{InvalidEmail}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
									"contentType": "application/json",
									"type": "text"
								},
								{
									"key": "FileMorbidity",
									"type": "file",
									"src": "YsOpMsjjc/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
								},
								{
									"key": "FileMorbidityCondition",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "File3",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "",
									"value": " ",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/patient/:patientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patient",
								":patientId"
							],
							"variable": [
								{
									"key": "patientId",
									"value": "{{Patientid}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "CreateNewPatient",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo ",
											"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
											"contentType": "application/json",
											"type": "text"
										},
										{
											"key": "FileMorbidity",
											"type": "file",
											"src": "ipqKE6mho/Diabetic Thyroid tests.pdf.pdf"
										},
										{
											"key": "FileMorbidityCondition",
											"type": "file",
											"src": "CPa3ZmO5U/HyperThyroid_Report_final.pdf"
										},
										{
											"key": "File3",
											"type": "file",
											"src": "u-PIIfT61/Hypo Thyroid-Report.pdf.pdf"
										},
										{
											"key": "",
											"value": " ",
											"type": "text",
											"disabled": true
										}
									],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/patient"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700088587&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=u3B0GpVAgPqAR2rjh5ot5TAaaR4tDvTTQvfi%2BJkYv2w%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700088587&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=u3B0GpVAgPqAR2rjh5ot5TAaaR4tDvTTQvfi%2BJkYv2w%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 15 Nov 2023 22:49:48 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 175,\n    \"FirstName\": \"Marjolaine\",\n    \"LastName\": \"McCullough\",\n    \"ContactNumber\": \"6660890974\",\n    \"Email\": \"Marjolaine_McCullough@gmail.com\",\n    \"Allergy\": \"Almond\",\n    \"FoodCategory\": \"Vegan\",\n    \"DateOfBirth\": \"1979-11-04T00:00:00.000+00:00\",\n    \"DieticianId\": 107\n}"
						}
					]
				},
				{
					"name": "CSVUpdateEmailPatientId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"First name is not empty\", function () {\r",
									"    pm.expect(pm.response.json().FirstName).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Last name is not empty\", function () {\r",
									"    pm.expect(pm.response.json().LastName).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Contact number is a string with 10 digits\", function () {\r",
									"    var contactNumber = pm.response.json().ContactNumber;\r",
									"    pm.expect(contactNumber).to.be.a('string');\r",
									"    pm.expect(contactNumber).to.match(/^\\d{10}$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is a valid email address\", function () {\r",
									"    pm.expect(pm.response.json().Email).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);\r",
									"});\r",
									"\r",
									"pm.test(\"Allergy is not empty\", function () {\r",
									"    pm.expect(pm.response.json().Allergy).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Food category is not empty\", function () {\r",
									"    pm.expect(pm.response.json().FoodCategory).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Date of birth is a valid date\", function () {\r",
									"    pm.expect(pm.response.json().DateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"patientId\": { \"type\": \"number\" },\r",
									"    \"FirstName\": { \"type\": \"string\" },\r",
									"    \"LastName\": { \"type\": \"string\" },\r",
									"    \"ContactNumber\": { \"type\": \"string\" },\r",
									"    \"Email\": { \"type\": \"string\" },\r",
									"    \"Allergy\": { \"type\": \"string\" },\r",
									"    \"FoodCategory\": { \"type\": \"string\" },\r",
									"    \"DateOfBirth\": { \"type\": \"string\" },\r",
									"    \"DieticianId\": { \"type\": \"number\" }\r",
									"  }\r",
									"};\r",
									"\r",
									"pm.test(\"Response body matches schema\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"First name is not empty\", function () {\r",
									"    pm.expect(pm.response.json().FirstName).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Last name is not empty\", function () {\r",
									"    pm.expect(pm.response.json().LastName).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Contact number is a string with 10 digits\", function () {\r",
									"    var contactNumber = pm.response.json().ContactNumber;\r",
									"    pm.expect(contactNumber).to.be.a('string');\r",
									"    pm.expect(contactNumber).to.match(/^\\d{10}$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is a valid email address\", function () {\r",
									"    pm.expect(pm.response.json().Email).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);\r",
									"});\r",
									"\r",
									"pm.test(\"Allergy is not empty\", function () {\r",
									"    pm.expect(pm.response.json().Allergy).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Food category is not empty\", function () {\r",
									"    pm.expect(pm.response.json().FoodCategory).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Date of birth is a valid date\", function () {\r",
									"    pm.expect(pm.response.json().DateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"patientId\": { \"type\": \"number\" },\r",
									"    \"FirstName\": { \"type\": \"string\" },\r",
									"    \"LastName\": { \"type\": \"string\" },\r",
									"    \"ContactNumber\": { \"type\": \"string\" },\r",
									"    \"Email\": { \"type\": \"string\" },\r",
									"    \"Allergy\": { \"type\": \"string\" },\r",
									"    \"FoodCategory\": { \"type\": \"string\" },\r",
									"    \"DateOfBirth\": { \"type\": \"string\" },\r",
									"    \"DieticianId\": { \"type\": \"number\" }\r",
									"  }\r",
									"};\r",
									"\r",
									"pm.test(\"Response body matches schema\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const allergies = [\"Egg\", \"Milk\", \"Soy\", \"Almond\", \"Peanuts\", \"Walnut\", \"Pistachio\", \"Sesame\", \"Hazelnut\", \"Pistachio\", \"Pecan\", \"Cashew\"];\r",
									"\r",
									"const foodCategories = [\"Vegan\", \"Vegetarian\", \"Jain\", \"Eggetarian\", \"NonVeg\"];\r",
									"\r",
									"function getRandomItem(array) {\r",
									"    const randomIndex = Math.floor(Math.random() * array.length);\r",
									"    return array[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"Allergy\", getRandomItem(allergies));\r",
									"pm.variables.set(\"FoodCategory\", getRandomItem(foodCategories));\r",
									"\r",
									"const minBirthDate = new Date(\"1950-01-01\");\r",
									"const maxBirthDate = new Date(\"2005-01-01\");\r",
									"const randomBirthDate = new Date(minBirthDate.getTime() + Math.random() * (maxBirthDate.getTime() - minBirthDate.getTime()));\r",
									"const formattedBirthDate = randomBirthDate.toISOString().split(\"T\")[0];\r",
									"pm.variables.set(\"DateOfBirth\", formattedBirthDate); \r",
									"\r",
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"\r",
									"pm.environment.set(\"randomNumber\",randomNumber);\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"first_name\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"postman.setEnvironmentVariable(\"last_name\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"\r",
									"\r",
									"email_formatted = pm.environment.get(\"first_name\") + '_' + pm.environment.get(\"last_name\") + '@gmail.com';\r",
									"pm.environment.set(\"email\", email_formatted);\r",
									"console.log(\"Email: \" + pm.environment.get(\"email\"));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdelineToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo ",
									"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{Email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
									"contentType": "application/json",
									"type": "text"
								},
								{
									"key": "FileMorbidity",
									"type": "file",
									"src": "YsOpMsjjc/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
								},
								{
									"key": "FileMorbidityCondition",
									"type": "file",
									"src": "TseNW7llh/HyperThyroid_Report_final.pdf"
								},
								{
									"key": "File3",
									"type": "file",
									"src": "1j91lqnU4/Hypo Thyroid-Report.pdf.pdf"
								},
								{
									"key": "",
									"value": " ",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/patient/:patientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patient",
								":patientId"
							],
							"variable": [
								{
									"key": "patientId",
									"value": "{{Patientid}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "CreateNewPatient",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo ",
											"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
											"contentType": "application/json",
											"type": "text"
										},
										{
											"key": "FileMorbidity",
											"type": "file",
											"src": "ipqKE6mho/Diabetic Thyroid tests.pdf.pdf"
										},
										{
											"key": "FileMorbidityCondition",
											"type": "file",
											"src": "CPa3ZmO5U/HyperThyroid_Report_final.pdf"
										},
										{
											"key": "File3",
											"type": "file",
											"src": "u-PIIfT61/Hypo Thyroid-Report.pdf.pdf"
										},
										{
											"key": "",
											"value": " ",
											"type": "text",
											"disabled": true
										}
									],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/patient"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700088587&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=u3B0GpVAgPqAR2rjh5ot5TAaaR4tDvTTQvfi%2BJkYv2w%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700088587&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=u3B0GpVAgPqAR2rjh5ot5TAaaR4tDvTTQvfi%2BJkYv2w%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 15 Nov 2023 22:49:48 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 175,\n    \"FirstName\": \"Marjolaine\",\n    \"LastName\": \"McCullough\",\n    \"ContactNumber\": \"6660890974\",\n    \"Email\": \"Marjolaine_McCullough@gmail.com\",\n    \"Allergy\": \"Almond\",\n    \"FoodCategory\": \"Vegan\",\n    \"DateOfBirth\": \"1979-11-04T00:00:00.000+00:00\",\n    \"DieticianId\": 107\n}"
						}
					]
				},
				{
					"name": "CSVUpdateFirstNamePatientId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"First name is not empty\", function () {\r",
									"    pm.expect(pm.response.json().FirstName).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Last name is not empty\", function () {\r",
									"    pm.expect(pm.response.json().LastName).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Contact number is a string with 10 digits\", function () {\r",
									"    var contactNumber = pm.response.json().ContactNumber;\r",
									"    pm.expect(contactNumber).to.be.a('string');\r",
									"    pm.expect(contactNumber).to.match(/^\\d{10}$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is a valid email address\", function () {\r",
									"    pm.expect(pm.response.json().Email).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);\r",
									"});\r",
									"\r",
									"pm.test(\"Allergy is not empty\", function () {\r",
									"    pm.expect(pm.response.json().Allergy).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Food category is not empty\", function () {\r",
									"    pm.expect(pm.response.json().FoodCategory).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Date of birth is a valid date\", function () {\r",
									"    pm.expect(pm.response.json().DateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"patientId\": { \"type\": \"number\" },\r",
									"    \"FirstName\": { \"type\": \"string\" },\r",
									"    \"LastName\": { \"type\": \"string\" },\r",
									"    \"ContactNumber\": { \"type\": \"string\" },\r",
									"    \"Email\": { \"type\": \"string\" },\r",
									"    \"Allergy\": { \"type\": \"string\" },\r",
									"    \"FoodCategory\": { \"type\": \"string\" },\r",
									"    \"DateOfBirth\": { \"type\": \"string\" },\r",
									"    \"DieticianId\": { \"type\": \"number\" }\r",
									"  }\r",
									"};\r",
									"\r",
									"pm.test(\"Response body matches schema\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const allergies = [\"Egg\", \"Milk\", \"Soy\", \"Almond\", \"Peanuts\", \"Walnut\", \"Pistachio\", \"Sesame\", \"Hazelnut\", \"Pistachio\", \"Pecan\", \"Cashew\"];\r",
									"\r",
									"const foodCategories = [\"Vegan\", \"Vegetarian\", \"Jain\", \"Eggetarian\", \"NonVeg\"];\r",
									"\r",
									"function getRandomItem(array) {\r",
									"    const randomIndex = Math.floor(Math.random() * array.length);\r",
									"    return array[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"Allergy\", getRandomItem(allergies));\r",
									"pm.variables.set(\"FoodCategory\", getRandomItem(foodCategories));\r",
									"\r",
									"const minBirthDate = new Date(\"1950-01-01\");\r",
									"const maxBirthDate = new Date(\"2005-01-01\");\r",
									"const randomBirthDate = new Date(minBirthDate.getTime() + Math.random() * (maxBirthDate.getTime() - minBirthDate.getTime()));\r",
									"const formattedBirthDate = randomBirthDate.toISOString().split(\"T\")[0];\r",
									"pm.variables.set(\"DateOfBirth\", formattedBirthDate); \r",
									"\r",
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"\r",
									"pm.environment.set(\"randomNumber\",randomNumber);\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"first_name\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"postman.setEnvironmentVariable(\"last_name\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"\r",
									"\r",
									"email_formatted = pm.environment.get(\"first_name\") + '_' + pm.environment.get(\"last_name\") + '@gmail.com';\r",
									"pm.environment.set(\"email\", email_formatted);\r",
									"console.log(\"Email: \" + pm.environment.get(\"email\"));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdelineToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo ",
									"value": "{\n   \"FirstName\":\"{{FirstName}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
									"contentType": "application/json",
									"type": "text"
								},
								{
									"key": "FileMorbidity",
									"type": "file",
									"src": "YsOpMsjjc/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
								},
								{
									"key": "FileMorbidityCondition",
									"type": "file",
									"src": "Cb_1YbXXw/HyperThyroid_Report_final.pdf"
								},
								{
									"key": "File3",
									"type": "file",
									"src": "C34hnJ-zZ/Hypo Thyroid-Report.pdf.pdf"
								},
								{
									"key": "",
									"value": " ",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/patient/:patientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patient",
								":patientId"
							],
							"variable": [
								{
									"key": "patientId",
									"value": "{{Patientid}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "CreateNewPatient",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo ",
											"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
											"contentType": "application/json",
											"type": "text"
										},
										{
											"key": "FileMorbidity",
											"type": "file",
											"src": "ipqKE6mho/Diabetic Thyroid tests.pdf.pdf"
										},
										{
											"key": "FileMorbidityCondition",
											"type": "file",
											"src": "CPa3ZmO5U/HyperThyroid_Report_final.pdf"
										},
										{
											"key": "File3",
											"type": "file",
											"src": "u-PIIfT61/Hypo Thyroid-Report.pdf.pdf"
										},
										{
											"key": "",
											"value": " ",
											"type": "text",
											"disabled": true
										}
									],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/patient"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700088587&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=u3B0GpVAgPqAR2rjh5ot5TAaaR4tDvTTQvfi%2BJkYv2w%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700088587&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=u3B0GpVAgPqAR2rjh5ot5TAaaR4tDvTTQvfi%2BJkYv2w%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 15 Nov 2023 22:49:48 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 175,\n    \"FirstName\": \"Marjolaine\",\n    \"LastName\": \"McCullough\",\n    \"ContactNumber\": \"6660890974\",\n    \"Email\": \"Marjolaine_McCullough@gmail.com\",\n    \"Allergy\": \"Almond\",\n    \"FoodCategory\": \"Vegan\",\n    \"DateOfBirth\": \"1979-11-04T00:00:00.000+00:00\",\n    \"DieticianId\": 107\n}"
						}
					]
				},
				{
					"name": "CSVNegativeUpdateFirstNamePatientId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"errorCode\", \"INVALID_REQ_DATA\");\r",
									"    pm.expect(jsonData).to.have.property(\"errorMessage\", \"User First Name is Mandatory!\\n \");\r",
									"});\r",
									"\r",
									"    "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const allergies = [\"Egg\", \"Milk\", \"Soy\", \"Almond\", \"Peanuts\", \"Walnut\", \"Pistachio\", \"Sesame\", \"Hazelnut\", \"Pistachio\", \"Pecan\", \"Cashew\"];\r",
									"\r",
									"const foodCategories = [\"Vegan\", \"Vegetarian\", \"Jain\", \"Eggetarian\", \"NonVeg\"];\r",
									"\r",
									"\r",
									"function getRandomItem(array) {\r",
									"    const randomIndex = Math.floor(Math.random() * array.length);\r",
									"    return array[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"Allergy\", getRandomItem(allergies));\r",
									"pm.variables.set(\"FoodCategory\", getRandomItem(foodCategories));\r",
									"\r",
									"const minBirthDate = new Date(\"1950-01-01\");\r",
									"const maxBirthDate = new Date(\"2005-01-01\");\r",
									"const randomBirthDate = new Date(minBirthDate.getTime() + Math.random() * (maxBirthDate.getTime() - minBirthDate.getTime()));\r",
									"const formattedBirthDate = randomBirthDate.toISOString().split(\"T\")[0];\r",
									"pm.variables.set(\"DateOfBirth\", formattedBirthDate); \r",
									"\r",
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"\r",
									"pm.environment.set(\"randomNumber\",randomNumber);\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"first_name\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"postman.setEnvironmentVariable(\"last_name\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"\r",
									"\r",
									"email_formatted = pm.environment.get(\"first_name\") + '_' + pm.environment.get(\"last_name\") + '@gmail.com';\r",
									"pm.environment.set(\"email\", email_formatted);\r",
									"console.log(\"Email: \" + pm.environment.get(\"email\"));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdelineToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo ",
									"value": "{\n   \"FirstName\":\"{{InvalidFirstName}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
									"contentType": "application/json",
									"type": "text"
								},
								{
									"key": "FileMorbidity",
									"type": "file",
									"src": "YsOpMsjjc/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
								},
								{
									"key": "FileMorbidityCondition",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "File3",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "",
									"value": " ",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/patient/:patientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patient",
								":patientId"
							],
							"variable": [
								{
									"key": "patientId",
									"value": "{{Patientid}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "CreateNewPatient",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo ",
											"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
											"contentType": "application/json",
											"type": "text"
										},
										{
											"key": "FileMorbidity",
											"type": "file",
											"src": "ipqKE6mho/Diabetic Thyroid tests.pdf.pdf"
										},
										{
											"key": "FileMorbidityCondition",
											"type": "file",
											"src": "CPa3ZmO5U/HyperThyroid_Report_final.pdf"
										},
										{
											"key": "File3",
											"type": "file",
											"src": "u-PIIfT61/Hypo Thyroid-Report.pdf.pdf"
										},
										{
											"key": "",
											"value": " ",
											"type": "text",
											"disabled": true
										}
									],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/patient"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700088587&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=u3B0GpVAgPqAR2rjh5ot5TAaaR4tDvTTQvfi%2BJkYv2w%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700088587&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=u3B0GpVAgPqAR2rjh5ot5TAaaR4tDvTTQvfi%2BJkYv2w%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 15 Nov 2023 22:49:48 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 175,\n    \"FirstName\": \"Marjolaine\",\n    \"LastName\": \"McCullough\",\n    \"ContactNumber\": \"6660890974\",\n    \"Email\": \"Marjolaine_McCullough@gmail.com\",\n    \"Allergy\": \"Almond\",\n    \"FoodCategory\": \"Vegan\",\n    \"DateOfBirth\": \"1979-11-04T00:00:00.000+00:00\",\n    \"DieticianId\": 107\n}"
						}
					]
				},
				{
					"name": "CSVUpdateLastNamePatientId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"First name is not empty\", function () {\r",
									"    pm.expect(pm.response.json().FirstName).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Last name is not empty\", function () {\r",
									"    pm.expect(pm.response.json().LastName).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Contact number is a string with 10 digits\", function () {\r",
									"    var contactNumber = pm.response.json().ContactNumber;\r",
									"    pm.expect(contactNumber).to.be.a('string');\r",
									"    pm.expect(contactNumber).to.match(/^\\d{10}$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is a valid email address\", function () {\r",
									"    pm.expect(pm.response.json().Email).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);\r",
									"});\r",
									"\r",
									"pm.test(\"Allergy is not empty\", function () {\r",
									"    pm.expect(pm.response.json().Allergy).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Food category is not empty\", function () {\r",
									"    pm.expect(pm.response.json().FoodCategory).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Date of birth is a valid date\", function () {\r",
									"    pm.expect(pm.response.json().DateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"patientId\": { \"type\": \"number\" },\r",
									"    \"FirstName\": { \"type\": \"string\" },\r",
									"    \"LastName\": { \"type\": \"string\" },\r",
									"    \"ContactNumber\": { \"type\": \"string\" },\r",
									"    \"Email\": { \"type\": \"string\" },\r",
									"    \"Allergy\": { \"type\": \"string\" },\r",
									"    \"FoodCategory\": { \"type\": \"string\" },\r",
									"    \"DateOfBirth\": { \"type\": \"string\" },\r",
									"    \"DieticianId\": { \"type\": \"number\" }\r",
									"  }\r",
									"};\r",
									"\r",
									"pm.test(\"Response body matches schema\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const allergies = [\"Egg\", \"Milk\", \"Soy\", \"Almond\", \"Peanuts\", \"Walnut\", \"Pistachio\", \"Sesame\", \"Hazelnut\", \"Pistachio\", \"Pecan\", \"Cashew\"];\r",
									"\r",
									"const foodCategories = [\"Vegan\", \"Vegetarian\", \"Jain\", \"Eggetarian\", \"NonVeg\"];\r",
									"\r",
									"function getRandomItem(array) {\r",
									"    const randomIndex = Math.floor(Math.random() * array.length);\r",
									"    return array[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"Allergy\", getRandomItem(allergies));\r",
									"pm.variables.set(\"FoodCategory\", getRandomItem(foodCategories));\r",
									"\r",
									"const minBirthDate = new Date(\"1950-01-01\");\r",
									"const maxBirthDate = new Date(\"2005-01-01\");\r",
									"const randomBirthDate = new Date(minBirthDate.getTime() + Math.random() * (maxBirthDate.getTime() - minBirthDate.getTime()));\r",
									"const formattedBirthDate = randomBirthDate.toISOString().split(\"T\")[0];\r",
									"pm.variables.set(\"DateOfBirth\", formattedBirthDate); \r",
									"\r",
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"\r",
									"pm.environment.set(\"randomNumber\",randomNumber);\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"first_name\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"postman.setEnvironmentVariable(\"last_name\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"\r",
									"\r",
									"email_formatted = pm.environment.get(\"first_name\") + '_' + pm.environment.get(\"last_name\") + '@gmail.com';\r",
									"pm.environment.set(\"email\", email_formatted);\r",
									"console.log(\"Email: \" + pm.environment.get(\"email\"));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdelineToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo ",
									"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{LastName}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
									"contentType": "application/json",
									"type": "text"
								},
								{
									"key": "FileMorbidity",
									"type": "file",
									"src": "YsOpMsjjc/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
								},
								{
									"key": "FileMorbidityCondition",
									"type": "file",
									"src": "JdD2xing4/HyperThyroid_Report_final.pdf"
								},
								{
									"key": "File3",
									"type": "file",
									"src": "ULZZVH4gx/Hypo Thyroid-Report.pdf.pdf"
								},
								{
									"key": "",
									"value": " ",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/patient/:patientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patient",
								":patientId"
							],
							"variable": [
								{
									"key": "patientId",
									"value": "{{Patientid}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "CreateNewPatient",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo ",
											"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
											"contentType": "application/json",
											"type": "text"
										},
										{
											"key": "FileMorbidity",
											"type": "file",
											"src": "ipqKE6mho/Diabetic Thyroid tests.pdf.pdf"
										},
										{
											"key": "FileMorbidityCondition",
											"type": "file",
											"src": "CPa3ZmO5U/HyperThyroid_Report_final.pdf"
										},
										{
											"key": "File3",
											"type": "file",
											"src": "u-PIIfT61/Hypo Thyroid-Report.pdf.pdf"
										},
										{
											"key": "",
											"value": " ",
											"type": "text",
											"disabled": true
										}
									],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/patient"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700088587&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=u3B0GpVAgPqAR2rjh5ot5TAaaR4tDvTTQvfi%2BJkYv2w%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700088587&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=u3B0GpVAgPqAR2rjh5ot5TAaaR4tDvTTQvfi%2BJkYv2w%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 15 Nov 2023 22:49:48 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 175,\n    \"FirstName\": \"Marjolaine\",\n    \"LastName\": \"McCullough\",\n    \"ContactNumber\": \"6660890974\",\n    \"Email\": \"Marjolaine_McCullough@gmail.com\",\n    \"Allergy\": \"Almond\",\n    \"FoodCategory\": \"Vegan\",\n    \"DateOfBirth\": \"1979-11-04T00:00:00.000+00:00\",\n    \"DieticianId\": 107\n}"
						}
					]
				},
				{
					"name": "CSVNegativeUpdateLastNamePatientId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"errorCode\", \"INVALID_REQ_DATA\");\r",
									"    pm.expect(jsonData).to.have.property(\"errorMessage\", \"User Last Name is Mandatory!\\n \");\r",
									"});\r",
									"\r",
									"    "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const allergies = [\"Egg\", \"Milk\", \"Soy\", \"Almond\", \"Peanuts\", \"Walnut\", \"Pistachio\", \"Sesame\", \"Hazelnut\", \"Pistachio\", \"Pecan\", \"Cashew\"];\r",
									"\r",
									"const foodCategories = [\"Vegan\", \"Vegetarian\", \"Jain\", \"Eggetarian\", \"NonVeg\"];\r",
									"\r",
									"function getRandomItem(array) {\r",
									"    const randomIndex = Math.floor(Math.random() * array.length);\r",
									"    return array[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"Allergy\", getRandomItem(allergies));\r",
									"pm.variables.set(\"FoodCategory\", getRandomItem(foodCategories));\r",
									"\r",
									"const minBirthDate = new Date(\"1950-01-01\");\r",
									"const maxBirthDate = new Date(\"2005-01-01\");\r",
									"const randomBirthDate = new Date(minBirthDate.getTime() + Math.random() * (maxBirthDate.getTime() - minBirthDate.getTime()));\r",
									"const formattedBirthDate = randomBirthDate.toISOString().split(\"T\")[0];\r",
									"pm.variables.set(\"DateOfBirth\", formattedBirthDate); \r",
									"\r",
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"\r",
									"pm.environment.set(\"randomNumber\",randomNumber);\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"first_name\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"postman.setEnvironmentVariable(\"last_name\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"\r",
									"\r",
									"email_formatted = pm.environment.get(\"first_name\") + '_' + pm.environment.get(\"last_name\") + '@gmail.com';\r",
									"pm.environment.set(\"email\", email_formatted);\r",
									"console.log(\"Email: \" + pm.environment.get(\"email\"));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdelineToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo ",
									"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{InvalidLastName}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
									"contentType": "application/json",
									"type": "text"
								},
								{
									"key": "FileMorbidity",
									"type": "file",
									"src": "YsOpMsjjc/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
								},
								{
									"key": "FileMorbidityCondition",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "File3",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "",
									"value": " ",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/patient/:patientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patient",
								":patientId"
							],
							"variable": [
								{
									"key": "patientId",
									"value": "{{Patientid}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "CreateNewPatient",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo ",
											"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
											"contentType": "application/json",
											"type": "text"
										},
										{
											"key": "FileMorbidity",
											"type": "file",
											"src": "ipqKE6mho/Diabetic Thyroid tests.pdf.pdf"
										},
										{
											"key": "FileMorbidityCondition",
											"type": "file",
											"src": "CPa3ZmO5U/HyperThyroid_Report_final.pdf"
										},
										{
											"key": "File3",
											"type": "file",
											"src": "u-PIIfT61/Hypo Thyroid-Report.pdf.pdf"
										},
										{
											"key": "",
											"value": " ",
											"type": "text",
											"disabled": true
										}
									],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/patient"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700088587&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=u3B0GpVAgPqAR2rjh5ot5TAaaR4tDvTTQvfi%2BJkYv2w%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700088587&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=u3B0GpVAgPqAR2rjh5ot5TAaaR4tDvTTQvfi%2BJkYv2w%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 15 Nov 2023 22:49:48 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 175,\n    \"FirstName\": \"Marjolaine\",\n    \"LastName\": \"McCullough\",\n    \"ContactNumber\": \"6660890974\",\n    \"Email\": \"Marjolaine_McCullough@gmail.com\",\n    \"Allergy\": \"Almond\",\n    \"FoodCategory\": \"Vegan\",\n    \"DateOfBirth\": \"1979-11-04T00:00:00.000+00:00\",\n    \"DieticianId\": 107\n}"
						}
					]
				},
				{
					"name": "NegativeMissingDateofBirthCreateNewPatient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const allergies = [\"Egg\", \"Milk\", \"Soy\", \"Almond\", \"Peanuts\", \"Walnut\", \"Pistachio\", \"Sesame\", \"Hazelnut\", \"Pistachio\", \"Pecan\", \"Cashew\"];\r",
									"\r",
									"const foodCategories = [\"Vegan\", \"Vegetarian\", \"Jain\", \"Eggetarian\", \"NonVeg\"];\r",
									"\r",
									"function getRandomItem(array) {\r",
									"    const randomIndex = Math.floor(Math.random() * array.length);\r",
									"    return array[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"Allergy\", getRandomItem(allergies));\r",
									"pm.variables.set(\"FoodCategory\", getRandomItem(foodCategories));\r",
									"\r",
									" \r",
									"\r",
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"\r",
									"pm.environment.set(\"randomNumber\",randomNumber);\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"first_name\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"postman.setEnvironmentVariable(\"last_name\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"\r",
									"\r",
									"email_formatted = pm.environment.get(\"first_name\") + '_' + pm.environment.get(\"last_name\") + '@gmail.com';\r",
									"pm.environment.set(\"email\", email_formatted);\r",
									"console.log(\"Email: \" + pm.environment.get(\"email\"));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"errorCode\", \"INVALID_REQ_DATA\");\r",
									"    pm.expect(jsonData).to.have.property(\"errorMessage\", \"Date of Birth is Mandatory!\\n \");\r",
									"});\r",
									"\r",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdelineToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo ",
									"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"\"\n}",
									"contentType": "application/json",
									"type": "text"
								},
								{
									"key": "FileMorbidity",
									"type": "file",
									"src": "YsOpMsjjc/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
								},
								{
									"key": "FileMorbidityCondition",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "File3",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "",
									"value": " ",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": "{{baseUrl}}/patient"
					},
					"response": [
						{
							"name": "NegativeMissingDateofBirthCreateNewPatient",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo ",
											"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"\"\n}",
											"contentType": "application/json",
											"type": "text"
										},
										{
											"key": "FileMorbidity",
											"type": "file",
											"src": "YsOpMsjjc/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
										},
										{
											"key": "FileMorbidityCondition",
											"type": "file",
											"src": [],
											"disabled": true
										},
										{
											"key": "File3",
											"type": "file",
											"src": [],
											"disabled": true
										},
										{
											"key": "",
											"value": " ",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": "{{baseUrl}}/patient"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700108564&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=JbCLgO4rOnGJPWbzEOqB7P9kxBe6foM34v8v%2FWkkFJ0%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700108564&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=JbCLgO4rOnGJPWbzEOqB7P9kxBe6foM34v8v%2FWkkFJ0%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Nov 2023 04:22:58 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"errorCode\": \"INVALID_REQ_DATA\",\n    \"errorMessage\": \"Date of Birth is Mandatory!\\n \"\n}"
						}
					]
				},
				{
					"name": "NegativeInvalidContactNumberCreateNewPatient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const allergies = [\"Egg\", \"Milk\", \"Soy\", \"Almond\", \"Peanuts\", \"Walnut\", \"Pistachio\", \"Sesame\", \"Hazelnut\", \"Pistachio\", \"Pecan\", \"Cashew\"];\r",
									"\r",
									"const foodCategories = [\"Vegan\", \"Vegetarian\", \"Jain\", \"Eggetarian\", \"NonVeg\"];\r",
									"\r",
									"function getRandomItem(array) {\r",
									"    const randomIndex = Math.floor(Math.random() * array.length);\r",
									"    return array[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"Allergy\", getRandomItem(allergies));\r",
									"pm.variables.set(\"FoodCategory\", getRandomItem(foodCategories));\r",
									"\r",
									"const minBirthDate = new Date(\"1950-01-01\");\r",
									"const maxBirthDate = new Date(\"2005-01-01\");\r",
									"const randomBirthDate = new Date(minBirthDate.getTime() + Math.random() * (maxBirthDate.getTime() - minBirthDate.getTime()));\r",
									"const formattedBirthDate = randomBirthDate.toISOString().split(\"T\")[0];\r",
									"pm.variables.set(\"DateOfBirth\", formattedBirthDate); \r",
									"\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"first_name\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"postman.setEnvironmentVariable(\"last_name\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"\r",
									"\r",
									"email_formatted = pm.environment.get(\"first_name\") + '_' + pm.environment.get(\"last_name\") + '@gmail.com';\r",
									"pm.environment.set(\"email\", email_formatted);\r",
									"console.log(\"Email: \" + pm.environment.get(\"email\"));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"errorCode\", \"INVALID_REQ_DATA\");\r",
									"    pm.expect(jsonData).to.have.property(\"errorMessage\", \"Contact number should contain 10 digits\\n \");\r",
									"});\r",
									"\r",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdelineToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo ",
									"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
									"contentType": "application/json",
									"type": "text"
								},
								{
									"key": "FileMorbidity",
									"type": "file",
									"src": "YsOpMsjjc/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
								},
								{
									"key": "FileMorbidityCondition",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "File3",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "",
									"value": " ",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": "{{baseUrl}}/patient"
					},
					"response": [
						{
							"name": "NegativeInvalidContactNumberCreateNewPatient",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo ",
											"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
											"contentType": "application/json",
											"type": "text"
										},
										{
											"key": "FileMorbidity",
											"type": "file",
											"src": "YsOpMsjjc/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
										},
										{
											"key": "FileMorbidityCondition",
											"type": "file",
											"src": [],
											"disabled": true
										},
										{
											"key": "File3",
											"type": "file",
											"src": [],
											"disabled": true
										},
										{
											"key": "",
											"value": " ",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": "{{baseUrl}}/patient"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700099410&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=TvVDV%2BfCDZLTu4USIduiZ0uvoh%2BaDqSDJ%2BZ1b08Efgw%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700099410&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=TvVDV%2BfCDZLTu4USIduiZ0uvoh%2BaDqSDJ%2BZ1b08Efgw%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Nov 2023 01:50:10 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"errorCode\": \"INVALID_REQ_DATA\",\n    \"errorMessage\": \"Contact number should contain 10 digits\\n \"\n}"
						}
					]
				},
				{
					"name": "NegativeInvalidEmailCreateNewPatient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const allergies = [\"Egg\", \"Milk\", \"Soy\", \"Almond\", \"Peanuts\", \"Walnut\", \"Pistachio\", \"Sesame\", \"Hazelnut\", \"Pistachio\", \"Pecan\", \"Cashew\"];\r",
									"\r",
									"const foodCategories = [\"Vegan\", \"Vegetarian\", \"Jain\", \"Eggetarian\", \"NonVeg\"];\r",
									"\r",
									"function getRandomItem(array) {\r",
									"    const randomIndex = Math.floor(Math.random() * array.length);\r",
									"    return array[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"Allergy\", getRandomItem(allergies));\r",
									"pm.variables.set(\"FoodCategory\", getRandomItem(foodCategories));\r",
									"\r",
									"const minBirthDate = new Date(\"1950-01-01\");\r",
									"const maxBirthDate = new Date(\"2005-01-01\");\r",
									"const randomBirthDate = new Date(minBirthDate.getTime() + Math.random() * (maxBirthDate.getTime() - minBirthDate.getTime()));\r",
									"const formattedBirthDate = randomBirthDate.toISOString().split(\"T\")[0];\r",
									"pm.variables.set(\"DateOfBirth\", formattedBirthDate); \r",
									"\r",
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"\r",
									"pm.environment.set(\"randomNumber\",randomNumber);\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"first_name\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"postman.setEnvironmentVariable(\"last_name\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"\r",
									"\r",
									"email_formatted = pm.environment.get(\"first_name\") + '_' + pm.environment.get(\"last_name\") + '@gmail.com';\r",
									"pm.environment.set(\"email\", email_formatted);\r",
									"console.log(\"Email: \" + pm.environment.get(\"email\"));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"errorCode\", \"INVALID_REQ_DATA\");\r",
									"    pm.expect(jsonData).to.have.property(\"errorMessage\", \"Invalid Email Id!\\n \");\r",
									"});\r",
									"\r",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdelineToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo ",
									"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
									"contentType": "application/json",
									"type": "text"
								},
								{
									"key": "FileMorbidity",
									"type": "file",
									"src": "YsOpMsjjc/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
								},
								{
									"key": "FileMorbidityCondition",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "File3",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "",
									"value": " ",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": "{{baseUrl}}/patient"
					},
					"response": [
						{
							"name": "NegativeMissingEmailCreateNewPatient",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo ",
											"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
											"contentType": "application/json",
											"type": "text"
										},
										{
											"key": "FileMorbidity",
											"type": "file",
											"src": "YsOpMsjjc/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
										},
										{
											"key": "FileMorbidityCondition",
											"type": "file",
											"src": [],
											"disabled": true
										},
										{
											"key": "File3",
											"type": "file",
											"src": [],
											"disabled": true
										},
										{
											"key": "",
											"value": " ",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": "{{baseUrl}}/patient"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700098686&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Km6%2Bj4AFwNezH6I%2FRDl8%2FVvE6%2Fk07Z18p5aiRgh2Tsc%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700098686&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Km6%2Bj4AFwNezH6I%2FRDl8%2FVvE6%2Fk07Z18p5aiRgh2Tsc%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Nov 2023 01:38:06 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"errorCode\": \"INVALID_REQ_DATA\",\n    \"errorMessage\": \"Invalid Email Id!\\n \"\n}"
						}
					]
				},
				{
					"name": "NegativeMissingLastNameCreateNewPatient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const allergies = [\"Egg\", \"Milk\", \"Soy\", \"Almond\", \"Peanuts\", \"Walnut\", \"Pistachio\", \"Sesame\", \"Hazelnut\", \"Pistachio\", \"Pecan\", \"Cashew\"];\r",
									"\r",
									"const foodCategories = [\"Vegan\", \"Vegetarian\", \"Jain\", \"Eggetarian\", \"NonVeg\"];\r",
									"\r",
									"function getRandomItem(array) {\r",
									"    const randomIndex = Math.floor(Math.random() * array.length);\r",
									"    return array[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"Allergy\", getRandomItem(allergies));\r",
									"pm.variables.set(\"FoodCategory\", getRandomItem(foodCategories));\r",
									"\r",
									"const minBirthDate = new Date(\"1950-01-01\");\r",
									"const maxBirthDate = new Date(\"2005-01-01\");\r",
									"const randomBirthDate = new Date(minBirthDate.getTime() + Math.random() * (maxBirthDate.getTime() - minBirthDate.getTime()));\r",
									"const formattedBirthDate = randomBirthDate.toISOString().split(\"T\")[0];\r",
									"pm.variables.set(\"DateOfBirth\", formattedBirthDate); \r",
									"\r",
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"\r",
									"pm.environment.set(\"randomNumber\",randomNumber);\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"first_name\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"postman.setEnvironmentVariable(\"last_name\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"\r",
									"\r",
									"email_formatted = pm.environment.get(\"first_name\") + '_' + pm.environment.get(\"last_name\") + '@gmail.com';\r",
									"pm.environment.set(\"email\", email_formatted);\r",
									"console.log(\"Email: \" + pm.environment.get(\"email\"));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"errorCode\", \"INVALID_REQ_DATA\");\r",
									"    pm.expect(jsonData).to.have.property(\"errorMessage\", \"User Last Name is Mandatory!\\n \");\r",
									"});\r",
									"\r",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdelineToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo ",
									"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
									"contentType": "application/json",
									"type": "text"
								},
								{
									"key": "FileMorbidity",
									"type": "file",
									"src": "TS-u6PA-v/Hypo Thyroid-Report.pdf.pdf"
								},
								{
									"key": "FileMorbidityCondition",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "File3",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "",
									"value": " ",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": "{{baseUrl}}/patient"
					},
					"response": [
						{
							"name": "NegativeMissingLastNameCreateNewPatient",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo ",
											"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
											"contentType": "application/json",
											"type": "text"
										},
										{
											"key": "FileMorbidity",
											"type": "file",
											"src": "TS-u6PA-v/Hypo Thyroid-Report.pdf.pdf"
										},
										{
											"key": "FileMorbidityCondition",
											"type": "file",
											"src": [],
											"disabled": true
										},
										{
											"key": "File3",
											"type": "file",
											"src": [],
											"disabled": true
										},
										{
											"key": "",
											"value": " ",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": "{{baseUrl}}/patient"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700097994&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=BiAM0s96glfdFgZ4r9J6X0dEukZFsMLhRHHca%2B0aipU%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700097994&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=BiAM0s96glfdFgZ4r9J6X0dEukZFsMLhRHHca%2B0aipU%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Nov 2023 01:26:34 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"errorCode\": \"INVALID_REQ_DATA\",\n    \"errorMessage\": \"User Last Name is Mandatory!\\n \"\n}"
						}
					]
				},
				{
					"name": "NegativeMissingFirstNameCreateNewPatient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const allergies = [\"Egg\", \"Milk\", \"Soy\", \"Almond\", \"Peanuts\", \"Walnut\", \"Pistachio\", \"Sesame\", \"Hazelnut\", \"Pistachio\", \"Pecan\", \"Cashew\"];\r",
									"\r",
									"const foodCategories = [\"Vegan\", \"Vegetarian\", \"Jain\", \"Eggetarian\", \"NonVeg\"];\r",
									"\r",
									"function getRandomItem(array) {\r",
									"    const randomIndex = Math.floor(Math.random() * array.length);\r",
									"    return array[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"Allergy\", getRandomItem(allergies));\r",
									"pm.variables.set(\"FoodCategory\", getRandomItem(foodCategories));\r",
									"\r",
									"const minBirthDate = new Date(\"1950-01-01\");\r",
									"const maxBirthDate = new Date(\"2005-01-01\");\r",
									"const randomBirthDate = new Date(minBirthDate.getTime() + Math.random() * (maxBirthDate.getTime() - minBirthDate.getTime()));\r",
									"const formattedBirthDate = randomBirthDate.toISOString().split(\"T\")[0];\r",
									"pm.variables.set(\"DateOfBirth\", formattedBirthDate); \r",
									"\r",
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"\r",
									"pm.environment.set(\"randomNumber\",randomNumber);\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"first_name\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"postman.setEnvironmentVariable(\"last_name\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"\r",
									"\r",
									"email_formatted = pm.environment.get(\"first_name\") + '_' + pm.environment.get(\"last_name\") + '@gmail.com';\r",
									"pm.environment.set(\"email\", email_formatted);\r",
									"console.log(\"Email: \" + pm.environment.get(\"email\"));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"errorCode\", \"INVALID_REQ_DATA\");\r",
									"    pm.expect(jsonData).to.have.property(\"errorMessage\", \"User First Name is Mandatory!\\n \");\r",
									"});\r",
									"\r",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdelineToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo ",
									"value": "{\n   \"FirstName\":\"\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
									"contentType": "application/json",
									"type": "text"
								},
								{
									"key": "FileMorbidity",
									"type": "file",
									"src": "XBLpzuDAl/Diabetic Thyroid tests.pdf.pdf"
								},
								{
									"key": "FileMorbidityCondition",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "File3",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "",
									"value": " ",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": "{{baseUrl}}/patient"
					},
					"response": [
						{
							"name": "NegativeMissingFirstNameCreateNewPatient",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo ",
											"value": "{\n   \"FirstName\":\"\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
											"contentType": "application/json",
											"type": "text"
										},
										{
											"key": "FileMorbidity",
											"type": "file",
											"src": "XBLpzuDAl/Diabetic Thyroid tests.pdf.pdf"
										},
										{
											"key": "FileMorbidityCondition",
											"type": "file",
											"src": [],
											"disabled": true
										},
										{
											"key": "File3",
											"type": "file",
											"src": [],
											"disabled": true
										},
										{
											"key": "",
											"value": " ",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": "{{baseUrl}}/patient"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700097785&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=R7z1%2By76zrszy2K9Kl21dC1YyqwH2pdTQ49RMxrZmmE%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700097785&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=R7z1%2By76zrszy2K9Kl21dC1YyqwH2pdTQ49RMxrZmmE%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Nov 2023 01:23:05 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"errorCode\": \"INVALID_REQ_DATA\",\n    \"errorMessage\": \"User First Name is Mandatory!\\n \"\n}"
						}
					]
				},
				{
					"name": "NegativeExistingCombinationNewPatient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const allergies = [\"Egg\", \"Milk\", \"Soy\", \"Almond\", \"Peanuts\", \"Walnut\", \"Pistachio\", \"Sesame\", \"Hazelnut\", \"Pistachio\", \"Pecan\", \"Cashew\"];\r",
									"\r",
									"const foodCategories = [\"Vegan\", \"Vegetarian\", \"Jain\", \"Eggetarian\", \"NonVeg\"];\r",
									"\r",
									"function getRandomItem(array) {\r",
									"    const randomIndex = Math.floor(Math.random() * array.length);\r",
									"    return array[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"Allergy\", getRandomItem(allergies));\r",
									"pm.variables.set(\"FoodCategory\", getRandomItem(foodCategories));\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"first_name\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"postman.setEnvironmentVariable(\"last_name\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"\r",
									"\r",
									"email_formatted = pm.environment.get(\"first_name\") + '_' + pm.environment.get(\"last_name\") + '@gmail.com';\r",
									"pm.environment.set(\"email\", email_formatted);\r",
									"console.log(\"Email: \" + pm.environment.get(\"email\"));\r",
									"\r",
									"ExistingContactNumber = pm.globals.get(\"ExistingContactNumber\");\r",
									"ExistingDateOfBirth = pm.globals.get(\"ExistingDateOfBirth\");\r",
									"pm.variables.set(\"ExistingContactNumber\", ExistingContactNumber);\r",
									"pm.variables.set(\"ExistingDateOfBirth\", ExistingDateOfBirth);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"errorCode\", \"DUPLICATE_ENTITY\");\r",
									"    pm.expect(jsonData).to.have.property(\"errorMessage\", \"Patient already exists with given DateOfBirth and ContactNumber\");\r",
									"});\r",
									"\r",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdelineToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo ",
									"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{ExistingContactNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{ExistingDateOfBirth}}\"\n}",
									"contentType": "application/json",
									"type": "text"
								},
								{
									"key": "FileMorbidity",
									"type": "file",
									"src": "-8_FD-cLL/Hypo Thyroid-Report.pdf.pdf"
								},
								{
									"key": "FileMorbidityCondition",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "File3",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "",
									"value": " ",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": "{{baseUrl}}/patient"
					},
					"response": [
						{
							"name": "NegativeCreateNewPatient",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo ",
											"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{ExistingContactNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{ExistingDateOfBirth}}\"\n}",
											"contentType": "application/json",
											"type": "text"
										},
										{
											"key": "FileMorbidity",
											"type": "file",
											"src": []
										},
										{
											"key": "FileMorbidityCondition",
											"type": "file",
											"src": []
										},
										{
											"key": "File3",
											"type": "file",
											"src": []
										},
										{
											"key": "",
											"value": " ",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": "{{baseUrl}}/patient"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700090976&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=hc%2Bp4d9JnUr5KPJriVuwaXcbGLyKf03wj1HfPYamTjY%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700090976&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=hc%2Bp4d9JnUr5KPJriVuwaXcbGLyKf03wj1HfPYamTjY%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 15 Nov 2023 23:29:36 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"errorCode\": \"DUPLICATE_ENTITY\",\n    \"errorMessage\": \"Patient already exists with given DateOfBirth and ContactNumber\"\n}"
						}
					]
				},
				{
					"name": "CSVNegativeFoodCategoryCreateNewPatient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									"const allergies = [\"Egg\", \"Milk\", \"Soy\", \"Almond\", \"Peanuts\", \"Walnut\", \"Pistachio\", \"Sesame\", \"Hazelnut\", \"Pistachio\", \"Pecan\", \"Cashew\"];\r",
									"\r",
									"function getRandomItem(array) {\r",
									"    const randomIndex = Math.floor(Math.random() * array.length);\r",
									"    return array[randomIndex];\r",
									"}\r",
									"pm.variables.set(\"Allergy\", getRandomItem(allergies));\r",
									"\r",
									"\r",
									"const minBirthDate = new Date(\"1950-01-01\");\r",
									"const maxBirthDate = new Date(\"2005-01-01\");\r",
									"const randomBirthDate = new Date(minBirthDate.getTime() + Math.random() * (maxBirthDate.getTime() - minBirthDate.getTime()));\r",
									"const formattedBirthDate = randomBirthDate.toISOString().split(\"T\")[0];\r",
									"pm.variables.set(\"DateOfBirth\", formattedBirthDate); \r",
									"\r",
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"\r",
									"pm.environment.set(\"randomNumber\",randomNumber);\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"first_name\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"postman.setEnvironmentVariable(\"last_name\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"\r",
									"\r",
									"email_formatted = pm.environment.get(\"first_name\") + '_' + pm.environment.get(\"last_name\") + '@gmail.com';\r",
									"pm.environment.set(\"email\", email_formatted);\r",
									"console.log(\"Email: \" + pm.environment.get(\"email\"));\r",
									"\r",
									"pm.environment.get()"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"errorCode\", \"INVALID_REQ_DATA\");\r",
									"    pm.expect(jsonData).to.have.property(\"errorMessage\", \"Invalid food catgory: Must be one of the categories in {VEGAN, VEGETARIAN, JAIN, EGGETARIAN, NONVEG}\\n \");\r",
									"});\r",
									"\r",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdelineToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo ",
									"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{NonAcceptedFood Category}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
									"contentType": "application/json",
									"type": "text"
								},
								{
									"key": "FileMorbidity",
									"type": "file",
									"src": "zvrNbSf0c/Diabetic Thyroid tests.pdf.pdf",
									"disabled": true
								},
								{
									"key": "FileMorbidityCondition",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "File3",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "",
									"value": " ",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": "{{baseUrl}}/patient"
					},
					"response": [
						{
							"name": "NegativeCreateNewPatient",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo ",
											"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{ExistingContactNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{ExistingDateOfBirth}}\"\n}",
											"contentType": "application/json",
											"type": "text"
										},
										{
											"key": "FileMorbidity",
											"type": "file",
											"src": []
										},
										{
											"key": "FileMorbidityCondition",
											"type": "file",
											"src": []
										},
										{
											"key": "File3",
											"type": "file",
											"src": []
										},
										{
											"key": "",
											"value": " ",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": "{{baseUrl}}/patient"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700090976&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=hc%2Bp4d9JnUr5KPJriVuwaXcbGLyKf03wj1HfPYamTjY%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700090976&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=hc%2Bp4d9JnUr5KPJriVuwaXcbGLyKf03wj1HfPYamTjY%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 15 Nov 2023 23:29:36 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"errorCode\": \"DUPLICATE_ENTITY\",\n    \"errorMessage\": \"Patient already exists with given DateOfBirth and ContactNumber\"\n}"
						}
					]
				},
				{
					"name": "DeletePatientValidPatientId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Patient with Id 1429 deleted Successfully!\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdelineToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/patient/:patientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patient",
								":patientId"
							],
							"variable": [
								{
									"key": "patientId",
									"value": "{{Patientid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NegativeDeletePatientInValidPatientId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const expectedErrorMessage = \"Patient not found with patientId : \";\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"errorCode\", \"NOT_FOUND\");\r",
									"    pm.expect(jsonData.errorMessage).to.contain(expectedErrorMessage);\r",
									"});\r",
									"\r",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdelineToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/patient/:patientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patient",
								":patientId"
							],
							"variable": [
								{
									"key": "patientId",
									"value": "0000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient1 Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is text/plain\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains('text/plain');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", ()=> {\r",
									" pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdelineToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/logoutdietician"
					},
					"response": []
				},
				{
					"name": "Patient1 Logout Swetha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is text/plain\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains('text/plain');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", ()=> {\r",
									" pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdelineToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/logoutdietician"
					},
					"response": []
				}
			]
		},
		{
			"name": "Patient2",
			"item": [
				{
					"name": "UserLoginSangeetha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"SangeethaToken\", response.token);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": ""
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"Spark33\",\r\n  \"userLoginEmail\": \"ssasangee@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "dietician-dev-41d9a344a720.herokuapp.com/dietician/login"
					},
					"response": []
				},
				{
					"name": "CreateNewPatient_s",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const allergies = [\"Egg\", \"Milk\", \"Soy\", \"Almond\", \"Peanuts\", \"Walnut\", \"Pistachio\", \"Sesame\", \"Hazelnut\", \"Pistachio\", \"Pecan\", \"Cashew\"];\r",
									"\r",
									"const foodCategories = [\"Vegan\", \"Vegetarian\", \"Jain\", \"Eggetarian\", \"NonVeg\"];\r",
									"\r",
									"function getRandomItem(array) {\r",
									"    const randomIndex = Math.floor(Math.random() * array.length);\r",
									"    return array[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"Allergy\", getRandomItem(allergies));\r",
									"pm.variables.set(\"FoodCategory\", getRandomItem(foodCategories));\r",
									"\r",
									"const minBirthDate = new Date(\"1950-01-01\");\r",
									"const maxBirthDate = new Date(\"2005-01-01\");\r",
									"const randomBirthDate = new Date(minBirthDate.getTime() + Math.random() * (maxBirthDate.getTime() - minBirthDate.getTime()));\r",
									"const formattedBirthDate = randomBirthDate.toISOString().split(\"T\")[0];\r",
									"pm.variables.set(\"DateOfBirth\", formattedBirthDate); \r",
									"\r",
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"\r",
									"pm.environment.set(\"randomNumber\",randomNumber);\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"first_name\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"postman.setEnvironmentVariable(\"last_name\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"\r",
									"\r",
									"email_formatted = pm.environment.get(\"first_name\") + '_' + pm.environment.get(\"last_name\") + '@gmail.com';\r",
									"pm.environment.set(\"email\", email_formatted);\r",
									"console.log(\"Email: \" + pm.environment.get(\"email\"));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"pm.globals.set(\"SangeethaPatientid\",response.patientId );\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"First name is not empty\", function () {\r",
									"    pm.expect(pm.response.json().FirstName).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Last name is not empty\", function () {\r",
									"    pm.expect(pm.response.json().LastName).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Contact number is a string with 10 digits\", function () {\r",
									"    var contactNumber = pm.response.json().ContactNumber;\r",
									"    pm.expect(contactNumber).to.be.a('string');\r",
									"    pm.expect(contactNumber).to.match(/^\\d{10}$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is a valid email address\", function () {\r",
									"    pm.expect(pm.response.json().Email).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);\r",
									"});\r",
									"\r",
									"pm.test(\"Allergy is not empty\", function () {\r",
									"    pm.expect(pm.response.json().Allergy).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Food category is not empty\", function () {\r",
									"    pm.expect(pm.response.json().FoodCategory).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Date of birth is a valid date\", function () {\r",
									"    pm.expect(pm.response.json().DateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"patientId\": { \"type\": \"number\" },\r",
									"    \"FirstName\": { \"type\": \"string\" },\r",
									"    \"LastName\": { \"type\": \"string\" },\r",
									"    \"ContactNumber\": { \"type\": \"string\" },\r",
									"    \"Email\": { \"type\": \"string\" },\r",
									"    \"Allergy\": { \"type\": \"string\" },\r",
									"    \"FoodCategory\": { \"type\": \"string\" },\r",
									"    \"DateOfBirth\": { \"type\": \"string\" },\r",
									"    \"DieticianId\": { \"type\": \"number\" }\r",
									"  }\r",
									"};\r",
									"\r",
									"pm.test(\"Response body matches schema\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{SangeethaToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo ",
									"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
									"contentType": "application/json",
									"type": "text"
								},
								{
									"key": "File",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "file",
									"type": "file",
									"src": "FL3_GyJdE/HyperThyroid_Report_final (1).pdf"
								},
								{
									"key": "File3",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "",
									"value": " ",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": "{{baseUrl}}/patient"
					},
					"response": [
						{
							"name": "CreateNewPatient",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo ",
											"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
											"contentType": "application/json",
											"type": "text"
										},
										{
											"key": "File",
											"type": "file",
											"src": [],
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "IHsnj-20e/HyperThyroid_Report_final.pdf"
										},
										{
											"key": "File3",
											"type": "file",
											"src": [],
											"disabled": true
										},
										{
											"key": "",
											"value": " ",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": "{{baseUrl}}/patient"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700164537&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=SfTiVwoPn97OssQOplpzJmd8A%2FMJc4uHHP5Np46HhXc%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700164537&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=SfTiVwoPn97OssQOplpzJmd8A%2FMJc4uHHP5Np46HhXc%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Nov 2023 19:55:37 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 566,\n    \"FirstName\": \"Tyreek\",\n    \"LastName\": \"Huel\",\n    \"ContactNumber\": \"6739030056\",\n    \"Email\": \"Tyreek_Huel@gmail.com\",\n    \"Allergy\": \"Hazelnut\",\n    \"FoodCategory\": \"Vegan\",\n    \"FileMorbidity\": {\n        \"655673b9d50d7811f3030cd8\": {\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\",\n            \"T3\": \"6.3 ng/mL\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"655673b9d50d7811f3030cd8\": \"Thyroid: Hyperthyroidism \\n\"\n    },\n    \"DateOfBirth\": \"2000-05-11T00:00:00.000+00:00\",\n    \"DieticianId\": 107\n}"
						}
					]
				},
				{
					"name": "CSVUpdateFirstNamePatientId_s",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"First name is not empty\", function () {\r",
									"    pm.expect(pm.response.json().FirstName).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Last name is not empty\", function () {\r",
									"    pm.expect(pm.response.json().LastName).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Contact number is a string with 10 digits\", function () {\r",
									"    var contactNumber = pm.response.json().ContactNumber;\r",
									"    pm.expect(contactNumber).to.be.a('string');\r",
									"    pm.expect(contactNumber).to.match(/^\\d{10}$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is a valid email address\", function () {\r",
									"    pm.expect(pm.response.json().Email).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);\r",
									"});\r",
									"\r",
									"pm.test(\"Allergy is not empty\", function () {\r",
									"    pm.expect(pm.response.json().Allergy).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Food category is not empty\", function () {\r",
									"    pm.expect(pm.response.json().FoodCategory).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Date of birth is a valid date\", function () {\r",
									"    pm.expect(pm.response.json().DateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"patientId\": { \"type\": \"number\" },\r",
									"    \"FirstName\": { \"type\": \"string\" },\r",
									"    \"LastName\": { \"type\": \"string\" },\r",
									"    \"ContactNumber\": { \"type\": \"string\" },\r",
									"    \"Email\": { \"type\": \"string\" },\r",
									"    \"Allergy\": { \"type\": \"string\" },\r",
									"    \"FoodCategory\": { \"type\": \"string\" },\r",
									"    \"DateOfBirth\": { \"type\": \"string\" },\r",
									"    \"DieticianId\": { \"type\": \"number\" }\r",
									"  }\r",
									"};\r",
									"\r",
									"pm.test(\"Response body matches schema\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const allergies = [\"Egg\", \"Milk\", \"Soy\", \"Almond\", \"Peanuts\", \"Walnut\", \"Pistachio\", \"Sesame\", \"Hazelnut\", \"Pistachio\", \"Pecan\", \"Cashew\"];\r",
									"\r",
									"const foodCategories = [\"Vegan\", \"Vegetarian\", \"Jain\", \"Eggetarian\", \"NonVeg\"];\r",
									"\r",
									"function getRandomItem(array) {\r",
									"    const randomIndex = Math.floor(Math.random() * array.length);\r",
									"    return array[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"Allergy\", getRandomItem(allergies));\r",
									"pm.variables.set(\"FoodCategory\", getRandomItem(foodCategories));\r",
									"\r",
									"const minBirthDate = new Date(\"1950-01-01\");\r",
									"const maxBirthDate = new Date(\"2005-01-01\");\r",
									"const randomBirthDate = new Date(minBirthDate.getTime() + Math.random() * (maxBirthDate.getTime() - minBirthDate.getTime()));\r",
									"const formattedBirthDate = randomBirthDate.toISOString().split(\"T\")[0];\r",
									"pm.variables.set(\"DateOfBirth\", formattedBirthDate); \r",
									"\r",
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"\r",
									"pm.environment.set(\"randomNumber\",randomNumber);\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"first_name\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"postman.setEnvironmentVariable(\"last_name\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"\r",
									"\r",
									"email_formatted = pm.environment.get(\"first_name\") + '_' + pm.environment.get(\"last_name\") + '@gmail.com';\r",
									"pm.environment.set(\"email\", email_formatted);\r",
									"console.log(\"Email: \" + pm.environment.get(\"email\"));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{SangeethaToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo ",
									"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
									"contentType": "application/json",
									"type": "text"
								},
								{
									"key": "FileMorbidity",
									"type": "file",
									"src": "YsOpMsjjc/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
								},
								{
									"key": "FileMorbidityCondition",
									"type": "file",
									"src": "Cb_1YbXXw/HyperThyroid_Report_final.pdf"
								},
								{
									"key": "File3",
									"type": "file",
									"src": "C34hnJ-zZ/Hypo Thyroid-Report.pdf.pdf"
								},
								{
									"key": "",
									"value": " ",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/patient/:patientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patient",
								":patientId"
							],
							"variable": [
								{
									"key": "patientId",
									"value": "{{SangeethaPatientid}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "CreateNewPatient",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo ",
											"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
											"contentType": "application/json",
											"type": "text"
										},
										{
											"key": "FileMorbidity",
											"type": "file",
											"src": "ipqKE6mho/Diabetic Thyroid tests.pdf.pdf"
										},
										{
											"key": "FileMorbidityCondition",
											"type": "file",
											"src": "CPa3ZmO5U/HyperThyroid_Report_final.pdf"
										},
										{
											"key": "File3",
											"type": "file",
											"src": "u-PIIfT61/Hypo Thyroid-Report.pdf.pdf"
										},
										{
											"key": "",
											"value": " ",
											"type": "text",
											"disabled": true
										}
									],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/patient"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700088587&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=u3B0GpVAgPqAR2rjh5ot5TAaaR4tDvTTQvfi%2BJkYv2w%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700088587&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=u3B0GpVAgPqAR2rjh5ot5TAaaR4tDvTTQvfi%2BJkYv2w%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 15 Nov 2023 22:49:48 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 175,\n    \"FirstName\": \"Marjolaine\",\n    \"LastName\": \"McCullough\",\n    \"ContactNumber\": \"6660890974\",\n    \"Email\": \"Marjolaine_McCullough@gmail.com\",\n    \"Allergy\": \"Almond\",\n    \"FoodCategory\": \"Vegan\",\n    \"DateOfBirth\": \"1979-11-04T00:00:00.000+00:00\",\n    \"DieticianId\": 107\n}"
						}
					]
				},
				{
					"name": "GetAllPatients_s",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var dieticianIds = [110, 109];\r",
									"var dieticianIdsString = dieticianIds.join(',');\r",
									"pm.request.url.update('dietician-dev-41d9a344a720.herokuapp.com/dietician/patient?DieticianId=' + dieticianIdsString);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK \", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{SangeethaToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/patient"
					},
					"response": []
				},
				{
					"name": "Get all Morbidities Copy_s",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", ()=> {\r",
									" pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"morbidityId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"morbidityTestId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"morbidityNameRegex\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"morbidityTestName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"morbidityTestUnit\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"morbidityMarkerMinVal\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"morbidityMarkerMaxVal\": {\r",
									"      \"type\": \"number\"\r",
									"    }\r",
									"  },\r",
									"}]\r",
									"}\r",
									"\r",
									"pm.test(\"Response body matches schema\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(pm.response.body);\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{SangeethaToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/morbidity"
					},
					"response": [
						{
							"name": "Get all Morbidities",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/morbidity"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700104854&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=27f8WeOz81XTWpWxPBZl36w2kuSqFkoWcrlTFtBCV8E%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700104854&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=27f8WeOz81XTWpWxPBZl36w2kuSqFkoWcrlTFtBCV8E%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Nov 2023 03:20:54 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"morbidityId\": 1,\n        \"morbidityTestId\": \"DIA_FG\",\n        \"morbidityNameRegex\": \"(?i)(.*)fasting(.*)[sugarglucose](.*)|(.*)glucose(.*)fasting(.*)\",\n        \"morbidityTestName\": \"Fasting Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 100,\n        \"morbidityMarkerMaxVal\": 125\n    },\n    {\n        \"morbidityId\": 2,\n        \"morbidityTestId\": \"DIA_AG\",\n        \"morbidityNameRegex\": \"(?i)(.*)average(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Average Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 121,\n        \"morbidityMarkerMaxVal\": 150\n    },\n    {\n        \"morbidityId\": 3,\n        \"morbidityTestId\": \"DIA_PG\",\n        \"morbidityNameRegex\": \"(?i)(.*)plasma(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Plasma Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 140,\n        \"morbidityMarkerMaxVal\": 199\n    },\n    {\n        \"morbidityId\": 4,\n        \"morbidityTestId\": \"DIA_HBA1C\",\n        \"morbidityNameRegex\": \"(.*)HbA[1I]c(.*)|(.*)H(.*)P(.*)L(.*)C(.*)\",\n        \"morbidityTestName\": \"HbA1c\",\n        \"morbidityTestUnit\": \"%\",\n        \"morbidityMarkerMinVal\": 5.7,\n        \"morbidityMarkerMaxVal\": 6.5\n    },\n    {\n        \"morbidityId\": 5,\n        \"morbidityTestId\": \"THYRO_TSH\",\n        \"morbidityNameRegex\": \"(?i)(.*)T(.*)S(.*)H(.*)|(.*)THYROID STIMULATING HORMONE(.*)\",\n        \"morbidityTestName\": \"TSH\",\n        \"morbidityTestUnit\": \"μIU/ml\",\n        \"morbidityMarkerMinVal\": 0.55,\n        \"morbidityMarkerMaxVal\": 4.78\n    },\n    {\n        \"morbidityId\": 6,\n        \"morbidityTestId\": \"THYRO_TSH_1\",\n        \"morbidityNameRegex\": \"(?i)(.*)T(.*)S(.*)H(.*)|(.*)THYROID STIMULATING HORMONE(.*)\",\n        \"morbidityTestName\": \"TSH\",\n        \"morbidityTestUnit\": \"uIU/ml\",\n        \"morbidityMarkerMinVal\": 0.55,\n        \"morbidityMarkerMaxVal\": 4.78\n    },\n    {\n        \"morbidityId\": 7,\n        \"morbidityTestId\": \"THYRO_T3\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"ng/dL\",\n        \"morbidityMarkerMinVal\": 60,\n        \"morbidityMarkerMaxVal\": 180\n    },\n    {\n        \"morbidityId\": 8,\n        \"morbidityTestId\": \"THYRO_T3_1\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"ng/mL\",\n        \"morbidityMarkerMinVal\": 0.6,\n        \"morbidityMarkerMaxVal\": 1.8\n    },\n    {\n        \"morbidityId\": 9,\n        \"morbidityTestId\": \"THYRO_T3_2\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"pg/mL\",\n        \"morbidityMarkerMinVal\": 1.5,\n        \"morbidityMarkerMaxVal\": 4.1\n    },\n    {\n        \"morbidityId\": 10,\n        \"morbidityTestId\": \"THYRO_T3_3\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"nmol/L\",\n        \"morbidityMarkerMinVal\": 0.9,\n        \"morbidityMarkerMaxVal\": 2.76\n    },\n    {\n        \"morbidityId\": 11,\n        \"morbidityTestId\": \"THYRO_T4\",\n        \"morbidityNameRegex\": \"(?i)(.*)T4(.*)\",\n        \"morbidityTestName\": \"T4\",\n        \"morbidityTestUnit\": \"μg/dL\",\n        \"morbidityMarkerMinVal\": 5,\n        \"morbidityMarkerMaxVal\": 12\n    },\n    {\n        \"morbidityId\": 12,\n        \"morbidityTestId\": \"THYRO_T4_1\",\n        \"morbidityNameRegex\": \"(?i)(.*)T4(.*)\",\n        \"morbidityTestName\": \"T4\",\n        \"morbidityTestUnit\": \"ug/dL\",\n        \"morbidityMarkerMinVal\": 5,\n        \"morbidityMarkerMaxVal\": 12\n    },\n    {\n        \"morbidityId\": 13,\n        \"morbidityTestId\": \"THYRO_T4_2\",\n        \"morbidityNameRegex\": \"(?i)(.*)T4(.*)\",\n        \"morbidityTestName\": \"T4\",\n        \"morbidityTestUnit\": \"ng/dL\",\n        \"morbidityMarkerMinVal\": 0.8,\n        \"morbidityMarkerMaxVal\": 1.9\n    },\n    {\n        \"morbidityId\": 14,\n        \"morbidityTestId\": \"BP_LEVEL\",\n        \"morbidityNameRegex\": \"(?i)(.*)Blood(.*)Pressure(.*)\",\n        \"morbidityTestName\": \"Blood Pressure Levels\",\n        \"morbidityTestUnit\": \"mm Hg\",\n        \"morbidityMarkerMinVal\": 80,\n        \"morbidityMarkerMaxVal\": 130\n    },\n    {\n        \"morbidityId\": 15,\n        \"morbidityTestId\": \"THYRO_TSH_2\",\n        \"morbidityNameRegex\": \"(?i)(.*)T(.*)S(.*)H(.*)|(.*)THYROID STIMULATING HORMONE(.*)\",\n        \"morbidityTestName\": \"TSH\",\n        \"morbidityTestUnit\": \"mIU/L\",\n        \"morbidityMarkerMinVal\": 0.45,\n        \"morbidityMarkerMaxVal\": 4.12\n    }\n]"
						}
					]
				},
				{
					"name": "Get Patients Morbidity Details_s",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.globals.set(\"DFileId\",response[0]?.fileId);",
									"console.log(response.fileId);",
									"",
									"pm.test(\"Content-Type header is present\", ()=> {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", ()=> {",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');",
									"});",
									"",
									"var schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"array\",",
									"  \"items\": [",
									"    {",
									"  ",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"morbidityId\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"morbidityTestId\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"morbidityNameRegex\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"morbidityTestName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"morbidityTestUnit\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"morbidityMarkerMinVal\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"morbidityMarkerMaxVal\": {",
									"      \"type\": \"number\"",
									"    }",
									"  },",
									" ",
									"}]",
									"}",
									"",
									"pm.test(\"Response body matches schema\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{SangeethaToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{baseUrl}}/patient/testReports/:patientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patient",
								"testReports",
								":patientId"
							],
							"variable": [
								{
									"key": "patientId",
									"value": "{{SangeethaPatientid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient1 Logout Sangeetha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is text/plain\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.contains('text/plain');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", ()=> {\r",
									" pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{SangeethaToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/logoutdietician"
					},
					"response": []
				},
				{
					"name": "DeletePatient_s",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{SangeethaToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/patient/:patientid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patient",
								":patientid"
							],
							"variable": [
								{
									"key": "patientid",
									"value": "{{SangeethaPatientid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NegativeDeletePatient_s",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{SangeethaToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/patient/:patientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patient",
								":patientId"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "patientId",
									"value": "{{SangeethaPatientid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Morbidity",
			"item": [
				{
					"name": "UserLoginDeepti",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"DeeptiToken\", response.token);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{DeeptiToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"Unity99\",\r\n  \"userLoginEmail\": \"deepti.soni4@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/login"
					},
					"response": []
				},
				{
					"name": "Get all Morbidities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", ()=> {\r",
									" pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"morbidityId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"morbidityTestId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"morbidityNameRegex\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"morbidityTestName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"morbidityTestUnit\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"morbidityMarkerMinVal\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"morbidityMarkerMaxVal\": {\r",
									"      \"type\": \"number\"\r",
									"    }\r",
									"  },\r",
									"}]\r",
									"}\r",
									"\r",
									"pm.test(\"Response body matches schema\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(pm.response.body);\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{DeeptiToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/morbidity"
					},
					"response": [
						{
							"name": "Get all Morbidities",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/morbidity"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700104854&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=27f8WeOz81XTWpWxPBZl36w2kuSqFkoWcrlTFtBCV8E%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700104854&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=27f8WeOz81XTWpWxPBZl36w2kuSqFkoWcrlTFtBCV8E%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 16 Nov 2023 03:20:54 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"morbidityId\": 1,\n        \"morbidityTestId\": \"DIA_FG\",\n        \"morbidityNameRegex\": \"(?i)(.*)fasting(.*)[sugarglucose](.*)|(.*)glucose(.*)fasting(.*)\",\n        \"morbidityTestName\": \"Fasting Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 100,\n        \"morbidityMarkerMaxVal\": 125\n    },\n    {\n        \"morbidityId\": 2,\n        \"morbidityTestId\": \"DIA_AG\",\n        \"morbidityNameRegex\": \"(?i)(.*)average(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Average Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 121,\n        \"morbidityMarkerMaxVal\": 150\n    },\n    {\n        \"morbidityId\": 3,\n        \"morbidityTestId\": \"DIA_PG\",\n        \"morbidityNameRegex\": \"(?i)(.*)plasma(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Plasma Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 140,\n        \"morbidityMarkerMaxVal\": 199\n    },\n    {\n        \"morbidityId\": 4,\n        \"morbidityTestId\": \"DIA_HBA1C\",\n        \"morbidityNameRegex\": \"(.*)HbA[1I]c(.*)|(.*)H(.*)P(.*)L(.*)C(.*)\",\n        \"morbidityTestName\": \"HbA1c\",\n        \"morbidityTestUnit\": \"%\",\n        \"morbidityMarkerMinVal\": 5.7,\n        \"morbidityMarkerMaxVal\": 6.5\n    },\n    {\n        \"morbidityId\": 5,\n        \"morbidityTestId\": \"THYRO_TSH\",\n        \"morbidityNameRegex\": \"(?i)(.*)T(.*)S(.*)H(.*)|(.*)THYROID STIMULATING HORMONE(.*)\",\n        \"morbidityTestName\": \"TSH\",\n        \"morbidityTestUnit\": \"μIU/ml\",\n        \"morbidityMarkerMinVal\": 0.55,\n        \"morbidityMarkerMaxVal\": 4.78\n    },\n    {\n        \"morbidityId\": 6,\n        \"morbidityTestId\": \"THYRO_TSH_1\",\n        \"morbidityNameRegex\": \"(?i)(.*)T(.*)S(.*)H(.*)|(.*)THYROID STIMULATING HORMONE(.*)\",\n        \"morbidityTestName\": \"TSH\",\n        \"morbidityTestUnit\": \"uIU/ml\",\n        \"morbidityMarkerMinVal\": 0.55,\n        \"morbidityMarkerMaxVal\": 4.78\n    },\n    {\n        \"morbidityId\": 7,\n        \"morbidityTestId\": \"THYRO_T3\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"ng/dL\",\n        \"morbidityMarkerMinVal\": 60,\n        \"morbidityMarkerMaxVal\": 180\n    },\n    {\n        \"morbidityId\": 8,\n        \"morbidityTestId\": \"THYRO_T3_1\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"ng/mL\",\n        \"morbidityMarkerMinVal\": 0.6,\n        \"morbidityMarkerMaxVal\": 1.8\n    },\n    {\n        \"morbidityId\": 9,\n        \"morbidityTestId\": \"THYRO_T3_2\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"pg/mL\",\n        \"morbidityMarkerMinVal\": 1.5,\n        \"morbidityMarkerMaxVal\": 4.1\n    },\n    {\n        \"morbidityId\": 10,\n        \"morbidityTestId\": \"THYRO_T3_3\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"nmol/L\",\n        \"morbidityMarkerMinVal\": 0.9,\n        \"morbidityMarkerMaxVal\": 2.76\n    },\n    {\n        \"morbidityId\": 11,\n        \"morbidityTestId\": \"THYRO_T4\",\n        \"morbidityNameRegex\": \"(?i)(.*)T4(.*)\",\n        \"morbidityTestName\": \"T4\",\n        \"morbidityTestUnit\": \"μg/dL\",\n        \"morbidityMarkerMinVal\": 5,\n        \"morbidityMarkerMaxVal\": 12\n    },\n    {\n        \"morbidityId\": 12,\n        \"morbidityTestId\": \"THYRO_T4_1\",\n        \"morbidityNameRegex\": \"(?i)(.*)T4(.*)\",\n        \"morbidityTestName\": \"T4\",\n        \"morbidityTestUnit\": \"ug/dL\",\n        \"morbidityMarkerMinVal\": 5,\n        \"morbidityMarkerMaxVal\": 12\n    },\n    {\n        \"morbidityId\": 13,\n        \"morbidityTestId\": \"THYRO_T4_2\",\n        \"morbidityNameRegex\": \"(?i)(.*)T4(.*)\",\n        \"morbidityTestName\": \"T4\",\n        \"morbidityTestUnit\": \"ng/dL\",\n        \"morbidityMarkerMinVal\": 0.8,\n        \"morbidityMarkerMaxVal\": 1.9\n    },\n    {\n        \"morbidityId\": 14,\n        \"morbidityTestId\": \"BP_LEVEL\",\n        \"morbidityNameRegex\": \"(?i)(.*)Blood(.*)Pressure(.*)\",\n        \"morbidityTestName\": \"Blood Pressure Levels\",\n        \"morbidityTestUnit\": \"mm Hg\",\n        \"morbidityMarkerMinVal\": 80,\n        \"morbidityMarkerMaxVal\": 130\n    },\n    {\n        \"morbidityId\": 15,\n        \"morbidityTestId\": \"THYRO_TSH_2\",\n        \"morbidityNameRegex\": \"(?i)(.*)T(.*)S(.*)H(.*)|(.*)THYROID STIMULATING HORMONE(.*)\",\n        \"morbidityTestName\": \"TSH\",\n        \"morbidityTestUnit\": \"mIU/L\",\n        \"morbidityMarkerMinVal\": 0.45,\n        \"morbidityMarkerMaxVal\": 4.12\n    }\n]"
						}
					]
				},
				{
					"name": "Morbidity condition by Test name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"pm.globals.set(\"MorbidityTestName\",response.morbidityTestName );\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", ()=> {\r",
									" pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"morbidityId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"morbidityTestId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"morbidityNameRegex\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"morbidityTestName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"morbidityTestUnit\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"morbidityMarkerMinVal\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"morbidityMarkerMaxVal\": {\r",
									"      \"type\": \"number\"\r",
									"    }\r",
									"  },\r",
									"}]\r",
									"}\r",
									"pm.test(\"Response body matches schema\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const morbidityTestName = [\"Fasting Glucose\", \"Average Glucose\", \"Plasma Glucose\", \"HbA1c\", \"Blood Pressure Levels\", \"TSH\", \"T3\", \"T4\",];\r",
									"\r",
									"function getRandomItem(array) {\r",
									"    const randomIndex = Math.floor(Math.random() * array.length);\r",
									"    return array[randomIndex];\r",
									"}\r",
									"\r",
									"pm.variables.set(\"MorbidityTestName\", getRandomItem(morbidityTestName));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{DeeptiToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/morbidity/:morbidityName",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"morbidity",
								":morbidityName"
							],
							"variable": [
								{
									"key": "morbidityName",
									"value": "{{MorbidityTestName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative Get all Morbidities with no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/morbidity"
					},
					"response": []
				},
				{
					"name": "Negative Morbidity condition by Test Name with invalid value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{DeeptiToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/morbidity/:morbidityTestName",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"morbidity",
								":morbidityTestName"
							],
							"variable": [
								{
									"key": "morbidityTestName",
									"value": "TT"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative Morbidity condition by Test Name with no Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/morbidity/:morbidityTestName",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"morbidity",
								":morbidityTestName"
							],
							"variable": [
								{
									"key": "morbidityTestName",
									"value": "Average Glucose"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative Morbidity User Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", ()=> {\r",
									" pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{DeeptiToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/xxxx"
					},
					"response": []
				},
				{
					"name": "Morbidity User Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is text/plain\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).contains('text/plain');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", ()=> {\r",
									" pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{DeeptiToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/logoutdietician"
					},
					"response": []
				}
			]
		},
		{
			"name": "User(Dietician)",
			"item": [
				{
					"name": "UserLoginDhivya",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"DhivyaToken\", response.token);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": ""
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"bliss78\",\r\n  \"userLoginEmail\": \"dhivyaroopar@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "dietician-dev-41d9a344a720.herokuapp.com/dietician/login"
					},
					"response": []
				},
				{
					"name": "CreatePatient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const allergies = [\"Egg\", \"Milk\", \"Soy\", \"Almond\", \"Peanuts\", \"Walnut\", \"Pistachio\", \"Sesame\", \"Hazelnut\", \"Pistachio\", \"Pecan\", \"Cashew\"];",
									"",
									"const foodCategories = [\"Vegan\", \"Vegetarian\", \"Jain\", \"Eggetarian\", \"NonVeg\"];",
									"",
									"function getRandomItem(array) {",
									"    const randomIndex = Math.floor(Math.random() * array.length);",
									"    return array[randomIndex];",
									"}",
									"",
									"pm.variables.set(\"Allergy\", getRandomItem(allergies));",
									"pm.variables.set(\"FoodCategory\", getRandomItem(foodCategories));",
									"",
									"const minBirthDate = new Date(\"1950-01-01\");",
									"const maxBirthDate = new Date(\"2005-01-01\");",
									"const randomBirthDate = new Date(minBirthDate.getTime() + Math.random() * (maxBirthDate.getTime() - minBirthDate.getTime()));",
									"const formattedBirthDate = randomBirthDate.toISOString().split(\"T\")[0];",
									"pm.variables.set(\"DateOfBirth\", formattedBirthDate); ",
									"",
									"const randomNumber = _.random(1000000000,9999999999)",
									"",
									"pm.environment.set(\"randomNumber\",randomNumber);",
									"",
									"",
									"postman.setEnvironmentVariable(\"first_name\", pm.variables.replaceIn('{{$randomFirstName}}'));",
									"postman.setEnvironmentVariable(\"last_name\", pm.variables.replaceIn('{{$randomLastName}}'));",
									"",
									"",
									"email_formatted = pm.environment.get(\"first_name\") + '_' + pm.environment.get(\"last_name\") + '@gmail.com';",
									"pm.environment.set(\"email\", email_formatted);",
									"console.log(\"Email: \" + pm.environment.get(\"email\"));",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"ExistingContactNumber\", response.ContactNumber);",
									"pm.collectionVariables.set(\"ExistingDateOfBirth\", response.DateOfBirth);",
									"pm.collectionVariables.set(\"patientid\", response.patientId);",
									"pm.globals.set(\"DhivyaPatientId\",response.patientId );",
									"",
									"pm.globals.set(\"UserEmail\",response.Email);",
									"",
									"pm.test(\"Content-Type header is present\", ()=> {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", ()=> {",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');",
									"});",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"First name is not empty\", function () {",
									"    pm.expect(pm.response.json().FirstName).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Last name is not empty\", function () {",
									"    pm.expect(pm.response.json().LastName).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Contact number is a string with 10 digits\", function () {",
									"    var contactNumber = pm.response.json().ContactNumber;",
									"    pm.expect(contactNumber).to.be.a('string');",
									"    pm.expect(contactNumber).to.match(/^\\d{10}$/);",
									"});",
									"",
									"",
									"pm.test(\"Email is a valid email address\", function () {",
									"    pm.expect(pm.response.json().Email).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);",
									"});",
									"",
									"pm.test(\"Allergy is not empty\", function () {",
									"    pm.expect(pm.response.json().Allergy).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Food category is not empty\", function () {",
									"    pm.expect(pm.response.json().FoodCategory).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Date of birth is a valid date\", function () {",
									"    pm.expect(pm.response.json().DateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);",
									"});",
									"",
									"",
									"",
									"",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"patientId\": { \"type\": \"number\" },",
									"    \"FirstName\": { \"type\": \"string\" },",
									"    \"LastName\": { \"type\": \"string\" },",
									"    \"ContactNumber\": { \"type\": \"string\" },",
									"    \"Email\": { \"type\": \"string\" },",
									"    \"Allergy\": { \"type\": \"string\" },",
									"    \"FoodCategory\": { \"type\": \"string\" },",
									"    \"DateOfBirth\": { \"type\": \"string\" },",
									"    \"DieticianId\": { \"type\": \"number\" }",
									"  }",
									"};",
									"",
									"pm.test(\"Response body matches schema\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{DhivyaToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{\n   \"FirstName\":\"{{first_name}}\",\n   \"LastName\":\"{{last_name}}\",\n   \"ContactNumber\":\"{{randomNumber}}\",\n   \"Email\":\"{{email}}\",\n   \"Allergy\":\"{{Allergy}}\",\n   \"FoodCategory\":\"{{FoodCategory}}\",\n   \"DateOfBirth\":\"{{DateOfBirth}}\"\n}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Users/manda/Downloads/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
								}
							]
						},
						"url": "{{baseUrl}}/patient"
					},
					"response": []
				},
				{
					"name": "Get Patients Morbidity Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.globals.set(\"DFileId\",response[0].fileId);",
									"console.log(response.fileId);",
									"",
									"pm.test(\"Content-Type header is present\", ()=> {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", ()=> {",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');",
									"});",
									"",
									"var schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"array\",",
									"  \"items\": [",
									"    {",
									"  ",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"morbidityId\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"morbidityTestId\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"morbidityNameRegex\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"morbidityTestName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"morbidityTestUnit\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"morbidityMarkerMinVal\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"morbidityMarkerMaxVal\": {",
									"      \"type\": \"number\"",
									"    }",
									"  },",
									" ",
									"}]",
									"}",
									"",
									"pm.test(\"Response body matches schema\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{DhivyaToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{baseUrl}}/patient/testReports/:patientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patient",
								"testReports",
								":patientId"
							],
							"variable": [
								{
									"key": "patientId",
									"value": "{{DhivyaPatientId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative Get Patients Morbidity Details WrongFileid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{DhivyaToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/patient/testReports/:patientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patient",
								"testReports",
								":patientId"
							],
							"variable": [
								{
									"key": "patientId",
									"value": "526"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative Patient Morbidity Details Nofile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{DhivyaToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/patient/testReports/:patientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patient",
								"testReports",
								":patientId"
							],
							"variable": [
								{
									"key": "patientId",
									"value": "{{Patientidwithoutfile}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Patient file by FileId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", ()=> {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", ()=> {",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/pdf');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{DhivyaToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/patient/testReports/viewFile/:fileId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patient",
								"testReports",
								"viewFile",
								":fileId"
							],
							"variable": [
								{
									"key": "fileId",
									"value": "{{DFileId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative  Retrieve Patient file by FileId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{DhivyaToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/patient/testReports/viewFile/:fileId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patient",
								"testReports",
								"viewFile",
								":fileId"
							],
							"variable": [
								{
									"key": "fileId",
									"value": "655673b9d50d7811f3030"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Dietician Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{DhivyaToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/logoutdietician"
					},
					"response": []
				}
			]
		},
		{
			"name": "Dietician and Patient Flow",
			"item": [
				{
					"name": "InvalidUserIDLoginPatient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"Token\", response.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"test\",\r\n  \"userLoginEmail\": \"ballu@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "dietician-dev-41d9a344a720.herokuapp.com/dietician/login"
					},
					"response": []
				},
				{
					"name": "InvalidUserpasswordLoginPatient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"Token\", response.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"tes\",\r\n  \"userLoginEmail\": \"Tyreek_Huel@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "dietician-dev-41d9a344a720.herokuapp.com/dietician/login"
					},
					"response": []
				},
				{
					"name": "UserLoginPatientnew",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"PatientToken\", response.token);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									" const userEmail = pm.globals.get(\"UserEmail\");\r",
									" pm.variables.set(\"userLoginEmail\",userEmail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"test\",\r\n  \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "dietician-dev-41d9a344a720.herokuapp.com/dietician/login"
					},
					"response": []
				},
				{
					"name": "PatientReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"pm.globals.set(\"FileId\",response[0].fileId);\r",
									"console.log(response.fileId);\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{PatientToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/patient/testReports/:patientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patient",
								"testReports",
								":patientId"
							],
							"variable": [
								{
									"key": "patientId",
									"value": "{{patientid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NegativeInvalidPatientIDReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{GlobalToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/patient/testReports/:patientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patient",
								"testReports",
								":patientId"
							],
							"variable": [
								{
									"key": "patientId",
									"value": "526"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PatientFile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/pdf');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{PatientToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/patient/testReports/viewFile/:fileId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patient",
								"testReports",
								"viewFile",
								":fileId"
							],
							"variable": [
								{
									"key": "fileId",
									"value": "{{FileId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NegativeInvalidPatientFileId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{PatientToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/patient/testReports/viewFile/:fileId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patient",
								"testReports",
								"viewFile",
								":fileId"
							],
							"variable": [
								{
									"key": "fileId",
									"value": "655673b9d50d7811f3030"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NegativeUserLoginPatient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"Token\", response.token);\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									" const userEmail = pm.globals.get(\"UserEmailwithoutfile\");\r",
									" pm.variables.set(\"userLoginEmail\",userEmail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"test\",\r\n  \"userLoginEmail\": \"Test{{userLoginEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "dietician-dev-41d9a344a720.herokuapp.com/dietician/login"
					},
					"response": []
				},
				{
					"name": "NegativePatientReportNull",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{PatientToken2}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/patient/testReports/:patientId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patient",
								"testReports",
								":patientId"
							],
							"variable": [
								{
									"key": "patientId",
									"value": "{{patientid}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "PatientReport",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/patient/testReports/:patientId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patient",
										"testReports",
										":patientId"
									],
									"variable": [
										{
											"key": "patientId",
											"value": "566"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1700182545&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=gWc5%2BQwDt1I6%2BsjNCyRvaHuoyiikQ9gMQMV6h%2BRHxww%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1700182545&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=gWc5%2BQwDt1I6%2BsjNCyRvaHuoyiikQ9gMQMV6h%2BRHxww%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 17 Nov 2023 00:55:45 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"fileId\": \"655673b9d50d7811f3030cd8\",\n        \"fileName\": \"HyperThyroid_Report_final.pdf\",\n        \"uploadDate\": \"2023-11-16T19:55:37.784+00:00\",\n        \"morbidConditions\": {\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\",\n            \"T3\": \"6.3 ng/mL\"\n        },\n        \"morbidConditionStr\": \"Thyroid: Hyperthyroidism \\n\"\n    }\n]"
						}
					]
				},
				{
					"name": "NegativeSCPatientFile-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{PatientToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/patient/testReports/viewFile/:fileId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"patient",
								"testReports",
								"viewFile",
								":fileId"
							],
							"variable": [
								{
									"key": "fileId",
									"value": "1234"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "",
			"type": "string"
		},
		{
			"key": "AdelineToken",
			"value": ""
		},
		{
			"key": "SangeethaToken",
			"value": ""
		},
		{
			"key": "DeeptiToken",
			"value": ""
		},
		{
			"key": "DhivyaToken",
			"value": ""
		},
		{
			"key": "ExistingContactNumber",
			"value": ""
		},
		{
			"key": "ExistingDateOfBirth",
			"value": ""
		},
		{
			"key": "patientid",
			"value": ""
		},
		{
			"key": "Token",
			"value": ""
		},
		{
			"key": "PatientToken",
			"value": ""
		}
	]
}